#!/usr/bin/env python3
"""
Test de validation des corrections SDDD reconsolid√©es
Script de test pour v√©rifier que les corrections sont bien int√©gr√©es dans l'architecture consolid√©e
"""

import asyncio
import json
import sys
from pathlib import Path

def test_imports():
    """Test d'importation des modules consolid√©s avec corrections SDDD"""
    print("üß™ Test 1: Importation des modules consolid√©s...")
    
    try:
        from papermill_mcp.main import JupyterPapermillMCPServer
        print("‚úÖ main.JupyterPapermillMCPServer - OK")
        
        from papermill_mcp.config import get_config
        print("‚úÖ config.get_config - OK")
        
        from papermill_mcp.services.notebook_service import NotebookService
        print("‚úÖ services.notebook_service.NotebookService - OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR IMPORT: {e}")
        return False

def test_json_parsing_correction():
    """Test de la correction JSON parsing dans parameterize_notebook"""
    print("\nüß™ Test 2: Correction JSON parsing parameterize_notebook...")
    
    try:
        from papermill_mcp.services.notebook_service import NotebookService
        
        # V√©rifier que la m√©thode existe et contient la correction
        import inspect
        source = inspect.getsource(NotebookService.parameterize_notebook)
        
        if "isinstance(parameters, str)" in source and "json.loads" in source:
            print("‚úÖ Correction JSON parsing automatique - INT√âGR√âE")
            return True
        else:
            print("‚ùå Correction JSON parsing - NON TROUV√âE")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR TEST JSON: {e}")
        return False

def test_timestamp_correction():
    """Test de la correction timestamps uniques dans execute_notebook_solution_a"""
    print("\nüß™ Test 3: Correction timestamps uniques execute_notebook_solution_a...")
    
    try:
        from papermill_mcp.services.notebook_service import NotebookService
        
        # V√©rifier que la m√©thode existe et contient la correction
        import inspect
        source = inspect.getsource(NotebookService.execute_notebook_solution_a)
        
        if "timestamp = datetime.datetime.now().strftime" in source and "_executed_{timestamp}.ipynb" in source:
            print("‚úÖ Correction timestamps uniques - INT√âGR√âE")
            return True
        else:
            print("‚ùå Correction timestamps - NON TROUV√âE")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR TEST TIMESTAMP: {e}")
        return False

async def test_server_initialization():
    """Test d'initialisation du serveur consolid√©"""
    print("\nüß™ Test 4: Initialisation serveur consolid√©...")
    
    try:
        from papermill_mcp.main import JupyterPapermillMCPServer
        from papermill_mcp.config import get_config
        
        config = get_config()
        server = JupyterPapermillMCPServer(config)
        
        # Test basique d'initialisation
        if hasattr(server, 'app') and hasattr(server, '_config'):
            print("‚úÖ Serveur consolid√© - Initialisation OK")
            return True
        else:
            print("‚ùå Serveur consolid√© - Initialisation √âCHEC")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR SERVEUR: {e}")
        return False

def test_obsolete_api_marking():
    """Test du marquage API obsol√®te"""
    print("\nüß™ Test 5: Marquage API obsol√®te main_fastmcp.py...")
    
    try:
        # Lire le fichier main_fastmcp.py
        fastmcp_path = Path(__file__).parent / "papermill_mcp" / "main_fastmcp.py"
        
        if fastmcp_path.exists():
            content = fastmcp_path.read_text(encoding='utf-8')
            
            if "API OBSOL√àTE" in content and "UTILISER main.py" in content:
                print("‚úÖ API obsol√®te - Marquage PR√âSENT")
                return True
            else:
                print("‚ùå API obsol√®te - Marquage MANQUANT")
                return False
        else:
            print("‚ùå Fichier main_fastmcp.py - NON TROUV√â")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR MARQUAGE: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("=" * 70)
    print("üéØ TEST RECONSOLIDATION CORRECTIONS SDDD")
    print("=" * 70)
    
    tests = [
        ("Imports", test_imports),
        ("JSON Parsing", test_json_parsing_correction),
        ("Timestamps", test_timestamp_correction),
        ("Serveur", lambda: asyncio.run(test_server_initialization())),
        ("API Obsol√®te", test_obsolete_api_marking)
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå ERREUR {name}: {e}")
            results.append((name, False))
    
    # R√©sum√©
    print("\n" + "=" * 70)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 70)
    
    success_count = 0
    for name, result in results:
        status = "‚úÖ SUCC√àS" if result else "‚ùå √âCHEC"
        print(f"{name:15} : {status}")
        if result:
            success_count += 1
    
    total_tests = len(results)
    success_rate = (success_count / total_tests) * 100
    
    print(f"\nScore: {success_count}/{total_tests} ({success_rate:.1f}%)")
    
    if success_rate >= 100:
        print("üéâ RECONSOLIDATION PARFAITE - Toutes les corrections SDDD int√©gr√©es")
        return 0
    elif success_rate >= 80:
        print("‚úÖ RECONSOLIDATION R√âUSSIE - Corrections principales int√©gr√©es")
        return 0
    else:
        print("‚ùå RECONSOLIDATION INCOMPL√àTE - Corrections manquantes")
        return 1

if __name__ == "__main__":
    sys.exit(main())