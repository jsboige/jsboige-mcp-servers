[tool:pytest]
# Configuration pytest pour les tests SDDD du serveur MCP Jupyter-Papermill

# Répertoires de test
testpaths = tests

# Marqueurs personnalisés
markers =
    unit: Tests unitaires (niveau 1 SDDD) - avec mocks, pas de dépendances
    integration: Tests d'intégration (niveau 2 SDDD) - avec Papermill réel
    e2e: Tests end-to-end (niveau 3 SDDD) - serveur MCP complet
    slow: Tests qui prennent plus de temps à exécuter
    requires_kernels: Tests nécessitant des kernels Jupyter spécifiques
    requires_dotnet: Tests nécessitant le kernel .NET Interactive

# Options par défaut
addopts = 
    --strict-markers
    --verbose
    --tb=short
    --durations=10
    --color=yes
    --asyncio-mode=auto
    -ra

# Filtres d'avertissements
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Configuration pour les tests asynchrones
asyncio_mode = auto

# Collecte de tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Exclusions
norecursedirs = .git .tox dist build *.egg __pycache__

# Minimum version
minversion = 7.0

# Logs
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configuration des timeouts pour éviter les blocages
timeout = 300
timeout_method = thread

# Structure de rapport de couverture (si --cov est utilisé)
[coverage:run]
source = papermill_mcp
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod