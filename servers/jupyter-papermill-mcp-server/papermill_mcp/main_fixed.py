#!/usr/bin/env python3
"""
Jupyter Papermill MCP Server - Version Corrig√©e
Utilise le SDK MCP standard avec la bonne structure des capabilities
"""

import asyncio
import json
import logging
import sys
from typing import Any, Dict, List, Optional

from mcp.server import Server
from mcp.server.stdio import stdio_server
from mcp.types import TextContent, Tool

# Configuration logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_server() -> Server:
    """Create and configure the MCP server with proper capabilities"""
    server = Server("jupyter-papermill-mcp-server")
    
    @server.list_tools()
    async def handle_list_tools() -> List[Tool]:
        """Return available tools"""
        return [
            Tool(
                name="test_connection",
                description="Test de connexion du serveur MCP Jupyter-Papermill",
                inputSchema={
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            ),
            Tool(
                name="list_kernels",
                description="Liste les kernels Jupyter disponibles sur le syst√®me",
                inputSchema={
                    "type": "object", 
                    "properties": {},
                    "required": []
                }
            ),
            Tool(
                name="create_notebook",
                description="Cr√©e un nouveau notebook Jupyter vide",
                inputSchema={
                    "type": "object",
                    "properties": {
                        "path": {
                            "type": "string",
                            "description": "Chemin o√π cr√©er le notebook"
                        },
                        "kernel_name": {
                            "type": "string", 
                            "description": "Nom du kernel √† utiliser",
                            "default": "python3"
                        }
                    },
                    "required": ["path"]
                }
            )
        ]
    
    @server.call_tool()
    async def handle_call_tool(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
        """Handle tool calls"""
        try:
            if name == "test_connection":
                return [TextContent(
                    type="text", 
                    text="‚úÖ Serveur MCP Jupyter-Papermill connect√© avec succ√®s! Protocole MCP valid√©."
                )]
                
            elif name == "list_kernels":
                try:
                    # Simulation basique - √† remplacer par la vraie impl√©mentation
                    return [TextContent(
                        type="text",
                        text="üîß Kernels disponibles:\n- python3: Python 3 (ipykernel)\n- Serveur op√©rationnel"
                    )]
                except Exception as e:
                    return [TextContent(
                        type="text",
                        text=f"‚ùå Erreur lors de la r√©cup√©ration des kernels: {str(e)}"
                    )]
                    
            elif name == "create_notebook":
                path = arguments.get("path", "")
                kernel_name = arguments.get("kernel_name", "python3")
                
                if not path:
                    return [TextContent(
                        type="text",
                        text="‚ùå Erreur: Le param√®tre 'path' est requis"
                    )]
                
                try:
                    # Structure basique d'un notebook Jupyter
                    notebook_content = {
                        "cells": [],
                        "metadata": {
                            "kernelspec": {
                                "display_name": f"Python 3",
                                "language": "python",
                                "name": kernel_name
                            },
                            "language_info": {
                                "name": "python",
                                "version": "3.8.0"
                            }
                        },
                        "nbformat": 4,
                        "nbformat_minor": 4
                    }
                    
                    # Simuler la cr√©ation du fichier
                    return [TextContent(
                        type="text",
                        text=f"‚úÖ Notebook cr√©√© avec succ√®s: {path}\nKernel: {kernel_name}"
                    )]
                    
                except Exception as e:
                    return [TextContent(
                        type="text",
                        text=f"‚ùå Erreur lors de la cr√©ation du notebook: {str(e)}"
                    )]
                    
            else:
                return [TextContent(
                    type="text",
                    text=f"‚ùå Outil inconnu: {name}"
                )]
                
        except Exception as e:
            logger.error(f"Erreur lors de l'ex√©cution de l'outil {name}: {e}")
            return [TextContent(
                type="text",
                text=f"‚ùå Erreur interne: {str(e)}"
            )]
    
    return server

async def main():
    """Main async entry point"""
    logger.info("üöÄ D√©marrage du serveur MCP Jupyter-Papermill...")
    
    server = create_server()
    
    async with stdio_server() as (read_stream, write_stream):
        logger.info("üì° Serveur MCP pr√™t sur stdin/stdout")
        await server.run(
            read_stream, 
            write_stream,
            server.create_initialization_options()
        )

def cli_main():
    """CLI entry point"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Serveur arr√™t√© par l'utilisateur")
    except Exception as e:
        logger.error(f"üí• Erreur fatale du serveur: {e}")
        sys.exit(1)

if __name__ == "__main__":
    cli_main()