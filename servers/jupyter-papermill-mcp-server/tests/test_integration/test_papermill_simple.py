#!/usr/bin/env python3
"""
Test simplifi√© de l'int√©gration Papermill pour le serveur MCP.

Ce test valide les fonctionnalit√©s Papermill de base avec les m√©thodes disponibles.
"""

import asyncio
import json
import logging
import tempfile
from pathlib import Path
from typing import Any, Dict

from papermill_mcp.config import get_config
from papermill_mcp.main import JupyterPapermillMCPServer
from papermill_mcp.core.papermill_executor import PapermillExecutor

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SimplePapermillTester:
    """Classe de test simplifi√© pour Papermill."""
    
    def __init__(self):
        self.config = get_config()
        self.server = JupyterPapermillMCPServer(self.config)
        self.temp_dir = Path(tempfile.mkdtemp())
        self.papermill_executor = None
        logger.info(f"R√©pertoire temporaire de test: {self.temp_dir}")
        
    async def setup(self) -> bool:
        """Initialise le serveur et l'ex√©cuteur Papermill."""
        logger.info("=== INITIALISATION TEST PAPERMILL ===")
        try:
            self.server.initialize()
            self.papermill_executor = PapermillExecutor(self.config)
            logger.info("‚úÖ Serveur et ex√©cuteur Papermill initialis√©s")
            return True
        except Exception as e:
            logger.error(f"‚ùå √âchec de l'initialisation: {e}")
            return False
    
    def create_test_notebook(self, filename: str) -> Path:
        """Cr√©e un notebook de test simple."""
        notebook_content = {
            "cells": [
                {
                    "cell_type": "code",
                    "execution_count": None,
                    "metadata": {"tags": ["parameters"]},
                    "outputs": [],
                    "source": [
                        "# Param√®tres par d√©faut\n",
                        "name = 'Test'\n",
                        "value = 42\n"
                    ]
                },
                {
                    "cell_type": "code",
                    "execution_count": None,
                    "metadata": {},
                    "outputs": [],
                    "source": [
                        "print(f'Bonjour {name}!')\n",
                        "print(f'Valeur: {value}')"
                    ]
                }
            ],
            "metadata": {
                "kernelspec": {
                    "display_name": "Python 3",
                    "language": "python",
                    "name": "python3"
                }
            },
            "nbformat": 4,
            "nbformat_minor": 5
        }
        
        notebook_path = self.temp_dir / filename
        with open(notebook_path, 'w', encoding='utf-8') as f:
            json.dump(notebook_content, f, indent=2)
            
        logger.info(f"‚úÖ Notebook test cr√©√©: {notebook_path}")
        return notebook_path
    
    async def test_papermill_executor_methods(self) -> bool:
        """Test des m√©thodes disponibles dans PapermillExecutor."""
        logger.info("=== TEST M√âTHODES PAPERMILL EXECUTOR ===")
        
        try:
            executor = self.papermill_executor
            
            # Test 1: Configuration accessible
            logger.info("Test 1: Configuration...")
            if hasattr(executor, 'config'):
                logger.info(f"‚úÖ Configuration accessible: {executor.config.papermill.output_dir}")
            
            # Test 2: D√©tection des kernels
            logger.info("Test 2: D√©tection des kernels...")
            try:
                kernels = executor._get_available_kernels()
                kernel_names = list(kernels.keys())
                logger.info(f"‚úÖ Kernels d√©tect√©s: {kernel_names}")
            except Exception as e:
                logger.info(f"‚ö†Ô∏è D√©tection kernels √©chou√©e (normal en mode test): {e}")
            
            # Test 3: Auto-d√©tection depuis notebook
            logger.info("Test 3: Auto-d√©tection de kernel depuis notebook...")
            test_notebook = self.create_test_notebook("test_kernel_detection.ipynb")
            try:
                detected_kernel = executor._auto_detect_kernel(str(test_notebook))
                logger.info(f"‚úÖ Kernel auto-d√©tect√©: {detected_kernel}")
            except Exception as e:
                logger.info(f"‚ö†Ô∏è Auto-d√©tection √©chou√©e (normal sans kernels): {e}")
            
            # Test 4: G√©n√©ration de chemin de sortie
            logger.info("Test 4: G√©n√©ration de chemin de sortie...")
            output_path = executor._generate_output_path(str(test_notebook))
            logger.info(f"‚úÖ Chemin g√©n√©r√©: {output_path}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans test des m√©thodes: {e}")
            return False
    
    async def test_papermill_execution_structure(self) -> bool:
        """Test de la structure d'ex√©cution Papermill."""
        logger.info("=== TEST STRUCTURE EX√âCUTION ===")
        
        try:
            # Cr√©er notebook de test
            test_notebook = self.create_test_notebook("execution_test.ipynb")
            
            # Test des param√®tres d'ex√©cution (sans ex√©cution r√©elle)
            test_parameters = {
                "name": "Papermill MCP Test",
                "value": 100
            }
            
            logger.info(f"Param√®tres de test: {test_parameters}")
            
            # Test de validation des param√®tres d'entr√©e
            executor = self.papermill_executor
            
            # Validation du fichier d'entr√©e
            if test_notebook.exists():
                logger.info("‚úÖ Fichier notebook d'entr√©e valid√©")
            
            # Test de g√©n√©ration de chemin de sortie personnalis√©
            custom_output = executor._generate_output_path(str(test_notebook), suffix="-custom")
            logger.info(f"‚úÖ Chemin personnalis√© g√©n√©r√©: {custom_output}")
            
            # Simulation de pr√©paration d'ex√©cution
            logger.info("‚úÖ Structure d'ex√©cution Papermill valid√©e")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans test de structure: {e}")
            return False
    
    async def test_papermill_configuration(self) -> bool:
        """Test de la configuration Papermill."""
        logger.info("=== TEST CONFIGURATION PAPERMILL ===")
        
        try:
            config = self.config.papermill
            
            # Test de configuration de base
            logger.info(f"Output directory: {config.output_dir}")
            logger.info(f"Timeout: {config.timeout}")
            logger.info(f"Kernel par d√©faut: {config.kernel_name}")
            
            # V√©rifier que le r√©pertoire de sortie est cr√©√©
            output_dir = Path(config.output_dir)
            if output_dir.exists():
                logger.info("‚úÖ R√©pertoire de sortie existe")
            else:
                logger.info("‚ÑπÔ∏è R√©pertoire de sortie sera cr√©√© automatiquement")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans test de configuration: {e}")
            return False
    
    async def run_simplified_tests(self) -> Dict[str, bool]:
        """Ex√©cute les tests Papermill simplifi√©s."""
        logger.info("üöÄ D√âBUT DES TESTS PAPERMILL SIMPLIFI√âS")
        
        results = {}
        
        # Test d'initialisation
        results["setup"] = await self.setup()
        
        if results["setup"]:
            # Tests des fonctionnalit√©s disponibles
            results["executor_methods"] = await self.test_papermill_executor_methods()
            results["execution_structure"] = await self.test_papermill_execution_structure()
            results["configuration"] = await self.test_papermill_configuration()
        else:
            logger.error("‚ùå √âchec de l'initialisation - tests interrompus")
            return results
        
        # R√©sum√© des r√©sultats
        logger.info("=" * 50)
        logger.info("R√âSULTATS DES TESTS PAPERMILL SIMPLIFI√âS:")
        logger.info("=" * 50)
        
        all_passed = True
        for test_name, result in results.items():
            status = "‚úÖ SUCC√àS" if result else "‚ùå √âCHEC"
            logger.info(f"{test_name.upper()}: {status}")
            if not result:
                all_passed = False
        
        logger.info("=" * 50)
        final_status = "‚úÖ TOUS LES TESTS R√âUSSIS" if all_passed else "‚ùå CERTAINS TESTS ONT √âCHOU√â"
        logger.info(f"R√âSULTAT GLOBAL: {final_status}")
        logger.info("=" * 50)
        
        return results


async def main():
    """Point d'entr√©e principal des tests simplifi√©s."""
    tester = SimplePapermillTester()
    results = await tester.run_simplified_tests()
    
    # Nettoyage
    import shutil
    shutil.rmtree(tester.temp_dir)
    logger.info(f"R√©pertoire temporaire nettoy√©: {tester.temp_dir}")
    
    # Code de sortie
    exit_code = 0 if all(results.values()) else 1
    logger.info(f"Code de sortie: {exit_code}")
    return exit_code


if __name__ == "__main__":
    import sys
    exit_code = asyncio.run(main())
    sys.exit(exit_code)