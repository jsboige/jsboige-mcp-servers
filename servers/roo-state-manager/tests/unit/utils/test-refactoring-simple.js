// Test simple pour valider le refactoring des strat√©gies
import { DetailLevelStrategyFactory } from './build/src/services/reporting/DetailLevelStrategyFactory.js';

console.log('üß™ TEST REFACTORING STRATEGY PATTERN');
console.log('===================================\n');

// Test des strat√©gies disponibles
const detailLevels = ['Summary', 'Messages', 'NoTools', 'NoResults', 'Full'];

console.log('üìä VALIDATION DES STRAT√âGIES CR√â√âES:\n');

let allPassed = true;

detailLevels.forEach(level => {
    try {
        console.log(`Testing ${level}...`);
        
        // Test 1: La strat√©gie peut √™tre cr√©√©e
        const strategy = DetailLevelStrategyFactory.createStrategy(level);
        console.log(`  ‚úÖ Strat√©gie ${level} cr√©√©e`);
        
        // Test 2: Les m√©thodes requises existent
        if (typeof strategy.isTocOnlyMode === 'function') {
            console.log(`  ‚úÖ isTocOnlyMode() disponible: ${strategy.isTocOnlyMode()}`);
        } else {
            console.log(`  ‚ùå isTocOnlyMode() manquante`);
            allPassed = false;
        }
        
        if (typeof strategy.formatMessageContent === 'function') {
            console.log(`  ‚úÖ formatMessageContent() disponible`);
        } else {
            console.log(`  ‚ùå formatMessageContent() manquante`);
            allPassed = false;
        }
        
        if (strategy.detailLevel === level) {
            console.log(`  ‚úÖ detailLevel correct: ${strategy.detailLevel}`);
        } else {
            console.log(`  ‚ùå detailLevel incorrect`);
            allPassed = false;
        }
        
        console.log('');
        
    } catch (error) {
        console.log(`  ‚ùå Erreur pour ${level}: ${error.message}\n`);
        allPassed = false;
    }
});

// Test du factory
console.log('üè≠ TEST DU FACTORY PATTERN:\n');

try {
    const supportedLevels = DetailLevelStrategyFactory.getSupportedDetailLevels();
    console.log(`‚úÖ Niveaux support√©s: ${supportedLevels.join(', ')}`);
    
    const info = DetailLevelStrategyFactory.getStrategyInfo('Full');
    console.log(`‚úÖ Info strat√©gie r√©cup√©r√©e: ${info.description}`);
    
} catch (error) {
    console.log(`‚ùå Erreur factory: ${error.message}`);
    allPassed = false;
}

console.log('\n' + '='.repeat(50));

if (allPassed) {
    console.log('üéâ REFACTORING VALID√â: Tous les tests passent!');
    console.log('‚úÖ Interface IReportingStrategy refactor√©e');
    console.log('‚úÖ 5 strat√©gies concr√®tes fonctionnelles'); 
    console.log('‚úÖ Factory pattern op√©rationnel');
    console.log('‚úÖ Types DetailLevel √©tendus');
} else {
    console.log('‚ùå √âCHEC: Certains tests ont √©chou√©');
}

console.log('='.repeat(50));