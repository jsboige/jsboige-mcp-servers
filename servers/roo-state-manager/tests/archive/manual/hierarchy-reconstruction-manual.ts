/**
 * Script de test pour valider le syst√®me de reconstruction hi√©rarchique
 */

import { HierarchyReconstructionEngine } from './utils/hierarchy-reconstruction-engine.js';
import { RooStorageDetector } from './utils/roo-storage-detector.js';

async function testHierarchyReconstruction() {
    console.log('üöÄ Test de reconstruction hi√©rarchique - D√âMARRAGE');
    console.log('=' .repeat(60));
    
    try {
        // 1. Charger tous les skeletons disponibles
        console.log('\nüìã √âTAPE 1: Chargement des skeletons...');
        const allSkeletons = await RooStorageDetector.buildHierarchicalSkeletons();
        console.log(`‚úÖ ${allSkeletons.length} skeletons charg√©s`);
        
        // 2. Identifier les t√¢ches orphelines (avant reconstruction)
        const orphansBefore = allSkeletons.filter(s => !s.parentTaskId);
        console.log(`\n‚ö†Ô∏è AVANT RECONSTRUCTION:`);
        console.log(`   - ${orphansBefore.length} t√¢ches orphelines`);
        console.log(`   - ${allSkeletons.length - orphansBefore.length} t√¢ches avec parent`);
        
        // 3. Lancer la reconstruction avec le nouveau moteur
        console.log('\nüîß √âTAPE 2: Reconstruction en cours...');
        const reconstructedSkeletons = await HierarchyReconstructionEngine.reconstructHierarchy(
            undefined, // Pas de filtre workspace
            true       // Force rebuild
        );
        
        // 4. Analyser les r√©sultats
        const orphansAfter = reconstructedSkeletons.filter(s => !s.parentTaskId);
        const reconstructedCount = reconstructedSkeletons.filter(s => {
            // Chercher les t√¢ches qui avaient un parentTaskId null avant mais pas apr√®s
            const original = allSkeletons.find(orig => orig.taskId === s.taskId);
            return !original?.parentTaskId && s.parentTaskId;
        }).length;
        
        console.log(`\n‚úÖ APR√àS RECONSTRUCTION:`);
        console.log(`   - ${orphansAfter.length} t√¢ches orphelines (${orphansBefore.length - orphansAfter.length} corrig√©es)`);
        console.log(`   - ${reconstructedCount} parentIds reconstruits`);
        console.log(`   - ${allSkeletons.length - orphansAfter.length} t√¢ches avec parent`);
        
        // 5. Calculer la profondeur de l'arbre
        const treeDepth = calculateTreeDepth(reconstructedSkeletons);
        console.log(`   - Profondeur de l'arbre: ${treeDepth}`);
        
        // 6. Afficher quelques exemples de reconstruction
        console.log('\nüìä EXEMPLES DE RECONSTRUCTION:');
        let exampleCount = 0;
        for (const skeleton of reconstructedSkeletons) {
            const original = allSkeletons.find(orig => orig.taskId === skeleton.taskId);
            if (!original?.parentTaskId && skeleton.parentTaskId && exampleCount < 5) {
                console.log(`   üìå ${skeleton.taskId.substring(0, 8)}...`);
                console.log(`      - Instruction: "${skeleton.truncatedInstruction?.substring(0, 50)}..."`);
                console.log(`      - Parent trouv√©: ${skeleton.parentTaskId.substring(0, 8)}...`);
                exampleCount++;
            }
        }
        
        // 7. R√©sum√© final
        console.log('\n' + '=' .repeat(60));
        if (reconstructedCount > 0) {
            console.log('üéâ SUCC√àS: Le syst√®me a reconstruit des hi√©rarchies manquantes!');
            console.log(`üìà Performance: ${reconstructedCount}/${orphansBefore.length} t√¢ches orphelines corrig√©es`);
        } else {
            console.log('‚ö†Ô∏è ATTENTION: Aucune reconstruction effectu√©e');
            console.log('V√©rifiez que les t√¢ches ont bien des instructions tronqu√©es dans leurs premiers messages');
        }
        
    } catch (error) {
        console.error('‚ùå ERREUR lors du test:', error);
        console.error('Stack trace:', (error as Error).stack);
    }
}

/**
 * Calcule la profondeur maximale de l'arbre
 */
function calculateTreeDepth(skeletons: any[]): number {
    const taskMap = new Map<string, any>();
    for (const skeleton of skeletons) {
        taskMap.set(skeleton.taskId, skeleton);
    }

    let maxDepth = 0;
    
    const calculateDepth = (taskId: string, currentDepth: number = 0, visited: Set<string> = new Set()): number => {
        if (visited.has(taskId)) {
            return currentDepth; // √âviter les cycles
        }
        visited.add(taskId);
        
        const task = taskMap.get(taskId);
        if (!task || !task.parentTaskId) {
            return currentDepth;
        }
        return calculateDepth(task.parentTaskId, currentDepth + 1, visited);
    };

    for (const skeleton of skeletons) {
        const depth = calculateDepth(skeleton.taskId);
        if (depth > maxDepth) {
            maxDepth = depth;
        }
    }

    return maxDepth;
}

// Lancer le test
testHierarchyReconstruction().catch(console.error);