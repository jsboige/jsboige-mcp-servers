/**
 * TEST DE NON-R√âGRESSION - FIX CRITIQUE
 * 
 * Bug identifi√© : Le syst√®me utilisait seulement les 192 premiers caract√®res 
 * des instructions parent au lieu d'extraire les sous-instructions r√©elles.
 * 
 * Fix appliqu√© : Extraction via regex des sous-instructions depuis le texte parent complet
 * avec la m√©thode addParentTaskWithSubInstructions()
 * 
 * R√©sultat : Relations d√©tect√©es passent de 0 √† 2+ (objectif atteint)
 */

import { expect } from '@jest/globals';
import { TaskInstructionIndex } from '../../src/utils/task-instruction-index.js';
import { extractSubInstructions } from '../../src/utils/sub-instruction-extractor.js';

describe('üö® R√âGRESSION CRITIQUE - Extraction hi√©rarchie parent-enfant', () => {
    let instructionIndex: TaskInstructionIndex;

    beforeEach(() => {
        instructionIndex = new TaskInstructionIndex();
    });

    test('BUG HISTORIQUE : ancien syst√®me ne trouvait aucune relation', async () => {
        const parentTaskId = 'parent-task-001';
        
        // ANCIEN SYST√àME D√âFAILLANT - utilise seulement 192 premiers caract√®res
        const longInstructionText = `
Voici une t√¢che complexe qui n√©cessite plusieurs √©tapes.
Nous devons d'abord analyser le contexte g√©n√©ral du projet.
Ensuite il faut proc√©der aux v√©rifications pr√©liminaires.
Une fois ces √©l√©ments valid√©s, nous pourrons passer aux √©tapes suivantes.

<new_task mode="code">
<message>Impl√©menter la fonctionnalit√© de validation des donn√©es</message>
</new_task>

Il est important de bien documenter chaque √©tape du processus.

<new_task mode="debug">
<message>Corriger les erreurs de compilation identifi√©es</message>
</new_task>

Ces instructions d√©taill√©es permettront une meilleure compr√©hension.`.trim();

        // ANCIEN SYST√àME : ne prendre que 192 chars (BUG)
        const oldPrefix = longInstructionText.substring(0, 192);
        await instructionIndex.addInstruction(parentTaskId, oldPrefix, oldPrefix);
        
        // Test enfants
        const child1Found = instructionIndex.searchExactPrefix('Impl√©menter la fonctionnalit√© de validation des donn√©es');
        const child2Found = instructionIndex.searchExactPrefix('Corriger les erreurs de compilation identifi√©es');
        
        // √âCHEC ATTENDU avec ancien syst√®me
        expect(child1Found).toHaveLength(0);
        expect(child2Found).toHaveLength(0);
        
        console.log('‚ùå ANCIEN SYST√àME : 0/2 relations trouv√©es (BUG CONFIRM√â)');
    });

    test('‚úÖ NOUVEAU SYST√àME : fix extraction sous-instructions', async () => {
        const parentTaskId = 'parent-task-002';
        
        const fullInstructionText = `
Voici une t√¢che complexe qui n√©cessite plusieurs √©tapes.
Nous devons d'abord analyser le contexte g√©n√©ral du projet.
Ensuite il faut proc√©der aux v√©rifications pr√©liminaires.
Une fois ces √©l√©ments valid√©s, nous pourrons passer aux √©tapes suivantes.

<new_task mode="code">
<message>Impl√©menter la fonctionnalit√© de validation des donn√©es</message>
</new_task>

Il est important de bien documenter chaque √©tape du processus.

<new_task mode="debug">
<message>Corriger les erreurs de compilation identifi√©es</message>
</new_task>

Ces instructions d√©taill√©es permettront une meilleure compr√©hension.`.trim();

        // NOUVEAU SYST√àME : extraction compl√®te avec regex
        const extractedCount = await instructionIndex.addParentTaskWithSubInstructions(
            parentTaskId, 
            fullInstructionText
        );
        
        // Validation extraction
        expect(extractedCount).toBeGreaterThan(0);
        console.log(`üîç Extracted ${extractedCount} sous-instructions`);
        
        // Test recherche enfants
        const child1 = instructionIndex.searchExactPrefix('Impl√©menter la fonctionnalit√© de validation des donn√©es');
        const child2 = instructionIndex.searchExactPrefix('Corriger les erreurs de compilation identifi√©es');
        
        // SUCC√àS ATTENDU avec nouveau syst√®me
        expect(child1).toHaveLength(1);
        expect(child1[0]?.taskId).toBe(parentTaskId);
        expect(child2).toHaveLength(1);
        expect(child2[0]?.taskId).toBe(parentTaskId);
        
        console.log('‚úÖ NOUVEAU SYST√àME : 2/2 relations trouv√©es (FIX VALID√â)');
    });

    test('üîç Test extraction regex isol√©e', () => {
        const testText = `
Texte avant les instructions importantes.

<new_task mode="architect">
<message>Concevoir l'architecture syst√®me</message>
</new_task>

Autre contenu interm√©diaire.

<new_task mode="code">
<message>D√©velopper les composants principaux</message>
</new_task>

Fin du texte avec conclusions.`.trim();

        const extracted = extractSubInstructions(testText);
        
        expect(extracted).toHaveLength(2);
        expect(extracted[0]).toBe('Concevoir l\'architecture syst√®me');
        expect(extracted[1]).toBe('D√©velopper les composants principaux');
        
        console.log('‚úÖ Extraction regex : 2 instructions trouv√©es');
    });

    test('üö® Test de non-r√©gression complet', async () => {
        // Test combinant plusieurs patterns d'instructions
        const complexParentText = `
Projet de d√©veloppement d'application web compl√®te.

## Phase 1 : Architecture
<new_task mode="architect">
<message>D√©finir l'architecture microservices</message>
</new_task>

## Phase 2 : D√©veloppement  
<new_task mode="code">
<message>Impl√©menter les API REST</message>
</new_task>

## Phase 3 : Tests
<new_task mode="debug">  
<message>Valider les tests d'int√©gration</message>
</new_task>

Conclusion du projet avec documentation.`.trim();

        const parentId = 'complex-parent-123';
        const count = await instructionIndex.addParentTaskWithSubInstructions(parentId, complexParentText);
        
        // Doit extraire 3 sous-instructions
        expect(count).toBe(3);
        
        // V√©rifier que toutes les relations sont trouv√©es
        const relation1 = instructionIndex.searchExactPrefix('D√©finir l\'architecture microservices');
        const relation2 = instructionIndex.searchExactPrefix('Impl√©menter les API REST');
        const relation3 = instructionIndex.searchExactPrefix('Valider les tests d\'int√©gration');
        
        expect(relation1).toHaveLength(1);
        expect(relation1[0]?.taskId).toBe(parentId);
        expect(relation2).toHaveLength(1);
        expect(relation2[0]?.taskId).toBe(parentId);
        expect(relation3).toHaveLength(1);
        expect(relation3[0]?.taskId).toBe(parentId);
        
        console.log('‚úÖ TEST NON-R√âGRESSION : 3/3 relations complexes trouv√©es');
    });
});