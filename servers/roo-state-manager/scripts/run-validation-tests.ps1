# Script de Validation Finale des Tests
# Objectif : Ex√©cuter la suite compl√®te de tests et capturer les r√©sultats

param(
    [string]$OutputFile = "test-results-post-consolidation.txt"
)

$ErrorActionPreference = "Continue"

Write-Host "==================================================" -ForegroundColor Cyan
Write-Host "VALIDATION FINALE DES TESTS POST-CONSOLIDATION" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan
Write-Host ""

# Se placer dans le r√©pertoire du package
$packageRoot = Split-Path -Parent $PSScriptRoot
Push-Location $packageRoot

Write-Host "üìÅ R√©pertoire : $packageRoot" -ForegroundColor Yellow
Write-Host "üìù Fichier de sortie : $OutputFile" -ForegroundColor Yellow
Write-Host ""

# Timestamp de d√©but
$startTime = Get-Date
Write-Host "‚è±Ô∏è  D√©but : $($startTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Green
Write-Host ""

# Ex√©cuter les tests avec capture compl√®te
Write-Host "üß™ Ex√©cution de la suite de tests..." -ForegroundColor Cyan
Write-Host ""

try {
    # Ex√©cuter npm test et capturer tout
    npm test 2>&1 | Tee-Object -FilePath $OutputFile
    
    $exitCode = $LASTEXITCODE
    
    # Timestamp de fin
    $endTime = Get-Date
    $duration = $endTime - $startTime
    
    Write-Host ""
    Write-Host "==================================================" -ForegroundColor Cyan
    Write-Host "‚è±Ô∏è  Fin : $($endTime.ToString('yyyy-MM-dd HH:mm:ss'))" -ForegroundColor Green
    Write-Host "‚è±Ô∏è  Dur√©e : $($duration.TotalSeconds) secondes" -ForegroundColor Green
    Write-Host "üìÑ R√©sultats sauvegard√©s dans : $OutputFile" -ForegroundColor Yellow
    Write-Host ""
    
    # Analyse rapide des r√©sultats
    Write-Host "üìä ANALYSE RAPIDE DES R√âSULTATS" -ForegroundColor Cyan
    Write-Host "================================" -ForegroundColor Cyan
    
    $content = Get-Content $OutputFile -Raw
    
    # Compter les tests
    if ($content -match "(\d+) passing") {
        $passing = $matches[1]
        Write-Host "‚úÖ Tests passants : $passing" -ForegroundColor Green
    }
    
    if ($content -match "(\d+) failing") {
        $failing = $matches[1]
        Write-Host "‚ùå Tests √©chouants : $failing" -ForegroundColor Red
    }
    else {
        Write-Host "‚úÖ Aucun √©chec d√©tect√©" -ForegroundColor Green
    }
    
    # Compter les suites
    $suiteCount = ([regex]::Matches($content, "^\s{2}\S", "Multiline")).Count
    if ($suiteCount -gt 0) {
        Write-Host "üì¶ Suites de tests : $suiteCount" -ForegroundColor Cyan
    }
    
    Write-Host ""
    Write-Host "==================================================" -ForegroundColor Cyan
    
    if ($exitCode -eq 0) {
        Write-Host "‚úÖ VALIDATION R√âUSSIE - Tous les tests sont op√©rationnels" -ForegroundColor Green
    }
    else {
        Write-Host "‚ö†Ô∏è  Des √©checs ont √©t√© d√©tect√©s - Analyse requise" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ùå ERREUR lors de l'ex√©cution des tests : $_" -ForegroundColor Red
    exit 1
}
finally {
    Pop-Location
}

Write-Host ""
Write-Host "Consulte $OutputFile pour les d√©tails complets" -ForegroundColor Cyan