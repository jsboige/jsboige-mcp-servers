#!/usr/bin/env pwsh
<#
.SYNOPSIS
    R√©solution automatique du conflit dans registry.ts
.DESCRIPTION
    R√©sout le conflit merge en gardant la version HEAD (--ours)
    qui contient tous les outils RooSync Messaging + get_current_task
    Mission : Validation Fonctionnelle MCP et Push Final S√©curis√©
#>

Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

$ServerDir = Split-Path -Parent $PSScriptRoot
Push-Location $ServerDir

try {
    Write-Host "üîß R√âSOLUTION CONFLIT registry.ts" -ForegroundColor Cyan
    Write-Host ""

    # 1. V√©rifier √©tat rebase
    $rebaseStatus = git status --short
    if ($rebaseStatus -notmatch "registry.ts") {
        Write-Host "‚ö†Ô∏è Pas de conflit d√©tect√© dans registry.ts" -ForegroundColor Yellow
        git status
        exit 1
    }

    Write-Host "üìä CONFLIT D√âTECT√â:" -ForegroundColor Cyan
    git status --short

    # 2. R√©solution avec strat√©gie --ours (garder HEAD)
    Write-Host ""
    Write-Host "üîß R√âSOLUTION STRAT√âGIE --OURS (garder version locale)..." -ForegroundColor Cyan
    Write-Host "  Version HEAD contient :" -ForegroundColor Gray
    Write-Host "    + Tous les outils RooSync Messaging (Phase 1+2)" -ForegroundColor Gray
    Write-Host "    + Handler get_current_task d√©j√† int√©gr√© (ligne 406)" -ForegroundColor Gray
    Write-Host "  Version upstream contient :" -ForegroundColor Gray
    Write-Host "    + Doublon get_current_task (d√©j√† pr√©sent)" -ForegroundColor Gray
    
    git checkout --ours src/tools/registry.ts
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host ""
        Write-Host "‚ùå Checkout --ours √©chou√©" -ForegroundColor Red
        exit 1
    }

    # 3. Stage fichier r√©solu
    Write-Host ""
    Write-Host "‚ûï STAGING FICHIER R√âSOLU..." -ForegroundColor Cyan
    git add src/tools/registry.ts
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host ""
        Write-Host "‚ùå Git add √©chou√©" -ForegroundColor Red
        exit 1
    }

    # 4. Continuer rebase
    Write-Host ""
    Write-Host "üîÑ CONTINUATION REBASE..." -ForegroundColor Cyan
    git rebase --continue
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host ""
        Write-Host "‚ùå Rebase --continue √©chou√©" -ForegroundColor Red
        Write-Host "√âtat git:" -ForegroundColor Cyan
        git status
        exit 1
    }

    # 5. V√©rification finale
    Write-Host ""
    Write-Host "‚úÖ REBASE COMPL√âT√â" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìä √âTAT FINAL:" -ForegroundColor Cyan
    git status --short --branch
    
    Write-Host ""
    Write-Host "üìú HISTORIQUE (5 derniers):" -ForegroundColor Cyan
    git log --oneline -5

    Write-Host ""
    Write-Host "‚úÖ CONFLIT R√âSOLU - Sous-module pr√™t pour push" -ForegroundColor Green

} catch {
    Write-Host ""
    Write-Host "‚ùå ERREUR: $_" -ForegroundColor Red
    exit 1
} finally {
    Pop-Location
}