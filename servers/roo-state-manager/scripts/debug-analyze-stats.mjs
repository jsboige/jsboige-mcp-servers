#!/usr/bin/env node
/**
 * üêõ DEBUG SCRIPT - Test d'ex√©cution analyze-all-workspaces-stats.mjs
 * 
 * Script de diagnostic pour identifier pourquoi le script d'analyse
 * ne produit pas de sortie visible lors de l'ex√©cution.
 * 
 * Usage: node scripts/debug-analyze-stats.mjs
 */

import { promises as fs } from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üêõ === DEBUG SCRIPT ANALYSE STATISTIQUE ===');
console.log('');

async function debugAnalysisScript() {
    try {
        console.log('1. Test existence cache skeleton...');
        const cachePath = path.join(__dirname, '../.roo-state-manager/skeleton-cache.json');
        
        if (await fs.access(cachePath).then(() => true).catch(() => false)) {
            const stats = await fs.stat(cachePath);
            console.log(`   ‚úÖ Cache trouv√©: ${cachePath}`);
            console.log(`   üìä Taille: ${stats.size} bytes`);
            console.log(`   üìÖ Derni√®re modification: ${stats.mtime}`);
        } else {
            console.log(`   ‚ùå Cache introuvable: ${cachePath}`);
            return;
        }
        
        console.log('');
        console.log('2. Test contenu cache...');
        const cacheContent = await fs.readFile(cachePath, 'utf8');
        const cache = JSON.parse(cacheContent);
        const taskIds = Object.keys(cache);
        console.log(`   üìà Nombre de t√¢ches: ${taskIds.length}`);
        for (const taskId of taskIds) {
            const task = cache[taskId];
            console.log(`   - ${taskId}: "${task.instruction?.substring(0, 50)}..."`);
        }
        
        console.log('');
        console.log('3. Test import module analyse...');
        const { AllWorkspacesStatsAnalyzer } = await import('./analyze-all-workspaces-stats.mjs');
        console.log('   ‚úÖ Module import√© avec succ√®s');
        
        console.log('');
        console.log('4. Test cr√©ation analyzer...');
        const analyzer = new AllWorkspacesStatsAnalyzer();
        console.log('   ‚úÖ Analyzer cr√©√© avec succ√®s');
        
        console.log('');
        console.log('5. Test ex√©cution analyse...');
        const report = await analyzer.analyzeAllWorkspaces();
        
        if (report) {
            console.log('   ‚úÖ Rapport g√©n√©r√© avec succ√®s!');
            console.log(`   üìä Taille rapport: ${report.length} caract√®res`);
            console.log('');
            console.log('=== D√âBUT RAPPORT (500 premiers caract√®res) ===');
            console.log(report.substring(0, 500));
            console.log('=== FIN EXTRAIT RAPPORT ===');
            
            // V√©rifier si le rapport a √©t√© sauvegard√©
            const reportPath = path.join(__dirname, '../docs/archives/2025-10/2025-10-05-05-RAPPORT-stats-parentid-tous-workspaces.md');
            if (await fs.access(reportPath).then(() => true).catch(() => false)) {
                console.log(`‚úÖ Rapport sauvegard√©: ${reportPath}`);
            } else {
                console.log(`‚ö†Ô∏è Rapport non sauvegard√© automatiquement`);
            }
        } else {
            console.log('   ‚ùå Aucun rapport g√©n√©r√©');
        }
        
    } catch (error) {
        console.error('‚ùå ERREUR DEBUG:', error.message);
        console.error('Stack trace:');
        console.error(error.stack);
    }
}

async function main() {
    console.log(`üìç R√©pertoire de travail: ${process.cwd()}`);
    console.log(`üìç R√©pertoire script: ${__dirname}`);
    console.log('');
    
    await debugAnalysisScript();
    
    console.log('');
    console.log('üèÅ DEBUG TERMIN√â');
}

main().catch(console.error);