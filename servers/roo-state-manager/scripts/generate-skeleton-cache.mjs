#!/usr/bin/env node
/**
 * Script de g√©n√©ration du cache skeleton pour l'analyse Phase 2c
 * Force la reconstruction du cache si n√©cessaire
 */

import { promises as fs } from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * G√©n√©rateur de cache skeleton
 */
class SkeletonCacheGenerator {
  constructor() {
    this.cacheLocation = path.join(__dirname, '../.roo-state-manager');
  }

  async ensureCacheDirectory() {
    try {
      await fs.mkdir(this.cacheLocation, { recursive: true });
      console.log(`üìÅ R√©pertoire cache cr√©√©: ${this.cacheLocation}`);
    } catch (error) {
      console.log(`üìÅ R√©pertoire cache existe: ${this.cacheLocation}`);
    }
  }

  async checkExistingCache() {
    const cachePath = path.join(this.cacheLocation, 'skeleton-cache.json');
    
    try {
      const stats = await fs.stat(cachePath);
      const cacheContent = await fs.readFile(cachePath, 'utf8');
      const cache = JSON.parse(cacheContent);
      const taskCount = Object.keys(cache).length;
      
      console.log(`üìã Cache existant trouv√©:`);
      console.log(`   - Chemin: ${cachePath}`);
      console.log(`   - Taille: ${stats.size} bytes`);
      console.log(`   - T√¢ches: ${taskCount}`);
      console.log(`   - Modifi√©: ${stats.mtime.toISOString()}`);
      
      return { exists: true, path: cachePath, taskCount, lastModified: stats.mtime };
    } catch (error) {
      console.log(`üìã Aucun cache skeleton trouv√© √† ${cachePath}`);
      return { exists: false, path: cachePath };
    }
  }

  async generateCacheViaMCP() {
    console.log('üîÑ G√©n√©ration du cache via l\'API MCP...');
    
    try {
      // Import dynamique pour √©viter les probl√®mes ESM
      const { createRequire } = await import('module');
      const require = createRequire(import.meta.url);
      
      // Charger le module compil√©
      const indexPath = path.join(__dirname, '../build/src/index.js');
      
      try {
        await fs.stat(indexPath);
        console.log('üì¶ Module build trouv√©, import...');
        
        // Import du module build
        const moduleUrl = `file://${indexPath}`;
        const module = await import(moduleUrl);
        
        if (module.RooStateManager) {
          const manager = new module.RooStateManager();
          console.log('üöÄ D√©marrage de la g√©n√©ration du cache...');
          
          await manager.buildSkeletonCache();
          console.log('‚úÖ Cache g√©n√©r√© avec succ√®s via MCP');
          return true;
        } else {
          console.log('‚ö†Ô∏è  RooStateManager non trouv√© dans le module build');
        }
      } catch (buildError) {
        console.log('‚ö†Ô∏è  Module build non disponible:', buildError.message);
      }
      
      // Fallback: essayer d'ex√©cuter via Node directement
      console.log('üîÑ Tentative de g√©n√©ration via script direct...');
      
      const { spawn } = await import('child_process');
      const { promisify } = await import('util');
      const execAsync = promisify(spawn);
      
      // Construire d'abord si n√©cessaire
      const buildProcess = spawn('npm', ['run', 'build'], {
        cwd: path.join(__dirname, '..'),
        stdio: 'pipe'
      });
      
      await new Promise((resolve, reject) => {
        buildProcess.on('close', (code) => {
          if (code === 0) {
            console.log('‚úÖ Build r√©ussi');
            resolve();
          } else {
            console.log('‚ö†Ô∏è  Build √©chou√©, continuons quand m√™me...');
            resolve(); // Continue m√™me si le build √©choue
          }
        });
        buildProcess.on('error', (error) => {
          console.log('‚ö†Ô∏è  Erreur build:', error.message);
          resolve(); // Continue quand m√™me
        });
      });
      
      return false;
    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration cache:', error.message);
      return false;
    }
  }

  async generateFallbackCache() {
    console.log('üîÑ G√©n√©ration d\'un cache minimal pour test...');
    
    const fallbackCache = {
      "test-task-1": {
        "taskId": "test-task-1",
        "instruction": "j'aimerais cr√©er un nouveau projet",
        "workspace": "d:/dev/roo-extensions",
        "childTaskInstructionPrefixes": ["cr√©er structure", "configurer d√©pendances"],
        "lastActivity": new Date().toISOString()
      },
      "test-task-2": {
        "taskId": "test-task-2", 
        "instruction": "peux-tu analyser ce code",
        "workspace": "d:/dev/roo-extensions",
        "childTaskInstructionPrefixes": [],
        "lastActivity": new Date().toISOString()
      },
      "test-task-3": {
        "taskId": "test-task-3",
        "instruction": "correction des imports dans le module",
        "workspace": "d:/dev/roo-extensions", 
        "childTaskInstructionPrefixes": ["v√©rifier syntaxe", "mise √† jour r√©f√©rences"],
        "lastActivity": new Date().toISOString()
      }
    };
    
    const cachePath = path.join(this.cacheLocation, 'skeleton-cache.json');
    await fs.writeFile(cachePath, JSON.stringify(fallbackCache, null, 2), 'utf8');
    
    console.log(`‚úÖ Cache fallback cr√©√©: ${cachePath}`);
    console.log(`   - ${Object.keys(fallbackCache).length} t√¢ches de test`);
    
    return true;
  }

  async run() {
    console.log('üîç Phase 2c : G√©n√©ration du cache skeleton...\n');
    
    await this.ensureCacheDirectory();
    
    const existingCache = await this.checkExistingCache();
    
    if (existingCache.exists && existingCache.taskCount > 0) {
      console.log('\n‚úÖ Cache skeleton valide d√©j√† pr√©sent');
      console.log('üí° Pas besoin de r√©g√©n√©ration pour l\'analyse Phase 2c');
      
      // V√©rifier si le cache est r√©cent (moins de 24h)
      const ageHours = (Date.now() - existingCache.lastModified.getTime()) / (1000 * 60 * 60);
      if (ageHours < 24) {
        console.log(`   Cache r√©cent (${ageHours.toFixed(1)}h), pr√™t pour analyse`);
        return true;
      } else {
        console.log(`   Cache ancien (${ageHours.toFixed(1)}h), recommandons r√©g√©n√©ration`);
      }
    }
    
    console.log('\nüîÑ G√©n√©ration du cache skeleton requis...');
    
    // Tentative de g√©n√©ration via MCP
    const mcpSuccess = await this.generateCacheViaMCP();
    
    if (mcpSuccess) {
      console.log('\n‚úÖ G√©n√©ration r√©ussie via MCP');
      return true;
    }
    
    // Fallback: cache minimal pour permettre les tests
    console.log('\n‚ö†Ô∏è  G√©n√©ration MCP √©chou√©e, cr√©ation cache fallback...');
    const fallbackSuccess = await this.generateFallbackCache();
    
    if (fallbackSuccess) {
      console.log('\n‚ö†Ô∏è  Cache fallback cr√©√© pour permettre les tests');
      console.log('üí° Note: Pour analyse compl√®te, utiliser le syst√®me MCP en production');
      return true;
    }
    
    console.log('\n‚ùå Impossible de g√©n√©rer le cache');
    return false;
  }
}

// Ex√©cution
const generator = new SkeletonCacheGenerator();
generator.run()
  .then((success) => {
    if (success) {
      console.log('\nüéØ Cache skeleton pr√™t pour analyse Phase 2c');
      process.exit(0);
    } else {
      console.log('\n‚ùå √âchec g√©n√©ration cache skeleton');
      process.exit(1);
    }
  })
  .catch((error) => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });