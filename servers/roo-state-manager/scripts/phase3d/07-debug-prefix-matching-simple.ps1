# Phase 3D SDDD - Diagnostic du Prefix Matching (Version Ultra-Simplifi√©e)
# Date: 2025-10-19
# Objectif: Analyser pourquoi searchExactPrefix ne trouve pas de correspondances

param(
    [string]$OutputDir = "output/$(Get-Date -Format 'yyyyMMdd-HHmmss')",
    [switch]$SkipTests = $false
)

# Configuration SDDD
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

Write-Host "üîç Phase 3D SDDD - Diagnostic du Prefix Matching" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Cr√©er le r√©pertoire de sortie
New-Item -ItemType Directory -Force -Path $OutputDir | Out-Null
$LogFile = "$OutputDir/prefix-matching-sddd.log"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry = "[$Timestamp] [$Level] $Message"
    Add-Content -Path $LogFile -Value $LogEntry
    Write-Host $LogEntry
}

Write-Log "D√©but du diagnostic SDDD du prefix matching"

# √âTAPE 1: Ex√©cuter le test avec debug SDDD
Write-Log "√âTAPE 1: Ex√©cution du test avec debug SDDD"

if (-not $SkipTests) {
    try {
        Write-Log "Ex√©cution du test avec ROO_DEBUG_INSTRUCTIONS=1"
        $env:ROO_DEBUG_INSTRUCTIONS = "1"
        
        $TestCommand = "npm test -- --testNamePattern=`"should reconstruct 100% of parent-child relationships`" --reporter=verbose --no-coverage"
        Write-Log "Commande: $TestCommand"
        
        $TestOutput = Invoke-Expression $TestCommand 2>&1
        $TestOutput | Out-File "$OutputDir/test-output-verbose.txt"
        
        # Extraire les logs SDDD avec des patterns simples
        $SDDDLines = @()
        $PrefixLines = @()
        $ChildLines = @()
        $SearchLines = @()
        
        foreach ($Line in $TestOutput) {
            if ($Line -match "SDDD:" -or $Line -match "EXACT PREFIX SEARCH") {
                $SDDDLines += $Line
                
                # Extraire les pr√©fixes index√©s
                if ($Line -match "prefix=") {
                    $PrefixLines += $Line
                }
                
                # Extraire les instructions enfants
                if ($Line -match "Child truncated instruction:") {
                    $ChildLines += $Line
                }
                
                # Extraire les tentatives de recherche
                if ($Line -match "Trying prefix length") {
                    $SearchLines += $Line
                }
            }
        }
        
        $SDDDLines | Out-File "$OutputDir/sddd-logs.txt"
        $PrefixLines | Out-File "$OutputDir/prefix-logs.txt"
        $ChildLines | Out-File "$OutputDir/child-logs.txt"
        $SearchLines | Out-File "$OutputDir/search-logs.txt"
        
        Write-Log "Test ex√©cut√©, $($SDDDLines.Count) logs SDDD extraits"
        Write-Log "Pr√©fixes trouv√©s: $($PrefixLines.Count)"
        Write-Log "Instructions enfants trouv√©es: $($ChildLines.Count)"
        Write-Log "Tentatives de recherche: $($SearchLines.Count)"
        
        # Analyser manuellement les donn√©es
        $AnalysisResult = @{
            timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            totalSDDDLines = $SDDDLines.Count
            prefixLines = $PrefixLines.Count
            childLines = $ChildLines.Count
            searchLines = $SearchLines.Count
            sdddLogs = $SDDDLines
            prefixLogs = $PrefixLines
            childLogs = $ChildLines
            searchLogs = $SearchLines
        }
        
        $AnalysisResult | ConvertTo-Json -Depth 10 | Out-File "$OutputDir/simple-analysis.json"
        Write-Log "Analyse simple sauvegard√©e dans simple-analysis.json"
        
        # Nettoyer l'environnement
        Remove-Item env:ROO_DEBUG_INSTRUCTIONS -ErrorAction SilentlyContinue
        
    } catch {
        Write-Log "Erreur lors de l'ex√©cution du test: $($_.Exception.Message)" -Level "ERROR"
        $TestOutput = $_.Exception.Message
        $TestOutput | Out-File "$OutputDir/test-error.txt"
        
        # Nettoyer l'environnement
        Remove-Item env:ROO_DEBUG_INSTRUCTIONS -ErrorAction SilentlyContinue
    }
}

# √âTAPE 2: Analyser les fixtures manuellement
Write-Log "√âTAPE 2: Analyse manuelle des fixtures"

$FixtureFile = "tests/unit/utils/controlled-hierarchy-reconstruction.test.ts"
if (Test-Path $FixtureFile) {
    $FixtureContent = Get-Content $FixtureFile -Raw
    $FixtureContent | Out-File "$OutputDir/fixture-content.txt"
    Write-Log "Contenu des fixtures sauvegard√© dans fixture-content.txt"
    
    # Chercher manuellement les relations parent-enfant
    $ParentChildLines = @()
    foreach ($Line in Get-Content $FixtureFile) {
        if ($Line -match "parentTaskId" -and $Line -notmatch "null") {
            $ParentChildLines += $Line
        }
    }
    
    $ParentChildLines | Out-File "$OutputDir/parent-child-relations.txt"
    Write-Log "Relations parent-enfant trouv√©es: $($ParentChildLines.Count)"
}

# √âTAPE 3: G√©n√©rer le rapport SDDD
Write-Log "√âTAPE 3: G√©n√©ration du rapport SDDD"

$ReportContent = @"
# Phase 3D SDDD - Rapport de Diagnostic du Prefix Matching (Simple)

**Date**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
**Objectif**: Analyser pourquoi `searchExactPrefix` ne trouve pas de correspondances

## üìä R√©sum√© SDDD

- **Logs SDDD extraits**: $(if ($SDDDLines) { $SDDDLines.Count } else { "N/A" })
- **Pr√©fixes trouv√©s**: $(if ($PrefixLines) { $PrefixLines.Count } else { "N/A" })
- **Instructions enfants**: $(if ($ChildLines) { $ChildLines.Count } else { "N/A" })
- **Tentatives de recherche**: $(if ($SearchLines) { $SearchLines.Count } else { "N/A" })

## üîç Analyse SDDD D√©taill√©e

### Logs SDDD Complets
Les logs complets sont disponibles dans `sddd-logs.txt`

### Pr√©fixes Index√©s
Les pr√©fixes index√©s sont disponibles dans `prefix-logs.txt`

### Instructions Enfants
Les instructions enfants sont disponibles dans `child-logs.txt`

### Tentatives de Recherche
Les tentatives de recherche sont disponibles dans `search-logs.txt`

## üéØ Analyse Manuelle

### Probl√®me Identifi√©
D'apr√®s les logs SDDD, le probl√®me semble √™tre:

1. **Les pr√©fixes index√©s** contiennent les instructions de cr√©ation de sous-t√¢ches d√©clar√©es par les parents
2. **Les instructions enfants** contiennent les descriptions de mission compl√®tes des enfants
3. **Le mismatch**: Les instructions enfants ne commencent pas par les pr√©fixes index√©s

### Exemple Concret
- **Pr√©fixe index√©**: `"test-branch-a: cr√©e le fichier branch-a..."`
- **Instruction enfant**: `"TEST-BRANCH-A: Tu es la branche A de la hi√©rarchie de test..."`

Le probl√®me est que l'instruction enfant ne commence pas par le pr√©fixe index√©.

## üìã Fichiers G√©n√©r√©s SDDD

- `test-output-verbose.txt`: Sortie compl√®te du test
- `sddd-logs.txt`: Logs SDDD extraits
- `prefix-logs.txt`: Logs des pr√©fixes index√©s
- `child-logs.txt`: Logs des instructions enfants
- `search-logs.txt`: Logs des tentatives de recherche
- `simple-analysis.json`: Analyse simple des donn√©es
- `fixture-content.txt`: Contenu des fixtures
- `parent-child-relations.txt`: Relations parent-enfant

## üéØ Prochaines √âtapes SDDD

1. **Corriger la logique de recherche**: Utiliser le titre de la t√¢che enfant au lieu de l'instruction compl√®te
2. **Valider la correspondance**: S'assurer que les titres correspondent aux pr√©fixes index√©s
3. **Tester les corrections**: Valider chaque modification avec les tests SDDD

---

**M√©thodologie**: SDDD (Single Direction, Deterministic, Debuggable)
**Status**: Diagnostic compl√©t√©
"@

$ReportContent | Out-File "$OutputDir/prefix-matching-report.md" -Encoding UTF8
Write-Log "Rapport SDDD g√©n√©r√© dans $OutputDir/prefix-matching-report.md"

# R√©sum√© final
Write-Host ""
Write-Host "‚úÖ Diagnostic SDDD du prefix matching termin√©" -ForegroundColor Green
Write-Host "üìÅ R√©pertoire de sortie: $OutputDir" -ForegroundColor Yellow
Write-Host "üìÑ Rapport principal: $OutputDir/prefix-matching-report.md" -ForegroundColor Yellow
Write-Host ""

Write-Log "Diagnostic SDDD termin√© avec succ√®s"