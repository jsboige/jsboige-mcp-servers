/**
 * Phase 5 Demo - D√©monstration des fonctionnalit√©s interactives
 * 
 * Ce fichier d√©montre l'utilisation des nouvelles fonctionnalit√©s Phase 5 :
 * - Table des mati√®res interactive avec compteurs visuels
 * - Troncature intelligente des param√®tres d'outils
 * - Interactions JavaScript avanc√©es
 * - Navigation par ancres avec smooth scroll
 */

import { 
    ClassifiedContent, 
    EnhancedSummaryOptions,
    TruncationOptions,
    InteractiveToCSOptions 
} from '../types/enhanced-conversation.js';
import { MarkdownFormatterService } from '../services/MarkdownFormatterService.js';

// ===========================
// CONFIGURATION PHASE 5 COMPL√àTE
// ===========================

const phase5Configuration: EnhancedSummaryOptions = {
    // Configuration de base
    detailLevel: 'Full',
    outputFormat: 'html',
    includeCss: true,
    generateToc: true,
    
    // Phase 5: Configuration de troncature
    truncationOptions: {
        enableTruncation: true,
        maxParameterLength: 500,
        maxResultLength: 1000,
        preserveStructure: true,
        showPreview: true,
        truncationThreshold: 300,
        previewLines: 3,
        expandButtonText: "üìñ Voir le contenu complet",
        collapseButtonText: "üìö R√©duire"
    } as TruncationOptions,
    
    // Phase 5: Configuration de table des mati√®res interactive
    interactiveToCSOptions: {
        enableInteractiveToC: true,
        showMessageCounters: true,
        showProgressBars: true,
        enableHierarchicalStructure: true,
        enableSmoothScroll: true,
        enableActiveHighlighting: true,
        enableSearchFilter: true,
        enableCopyToClipboard: true,
        enableCollapsibleSections: true,
        sectionIcons: true
    } as InteractiveToCSOptions,
    
    // Phase 5: Feature flags avanc√©s
    enhancementFlags: {
        // Phase 4 existant
        enableAdvancedCSS: true,
        enableResponsiveDesign: true,
        enableSyntaxHighlighting: true,
        enableAnimations: true,
        
        // Phase 5 nouvelles fonctionnalit√©s
        enableInteractiveToC: true,
        enableParameterTruncation: true,
        enableJavaScriptInteractions: true,
        enableAdvancedNavigation: true,
        enableCopyToClipboard: true,
        enableSearchAndFilter: true
    }
};

// ===========================
// DONN√âES DE TEST PHASE 5
// ===========================

const sampleMessages: ClassifiedContent[] = [
    {
        type: 'User',
        subType: 'UserMessage',
        content: 'Peux-tu cr√©er un script Python pour analyser des donn√©es CSV ?',
        index: 0,
        contentSize: 58,
        isRelevant: true,
        confidenceScore: 0.9
    },
    {
        type: 'Assistant',
        subType: 'Completion',
        content: 'Je vais cr√©er un script Python pour analyser des donn√©es CSV. Commen√ßons par lire le fichier.',
        index: 1,
        contentSize: 97,
        isRelevant: true,
        confidenceScore: 0.95
    },
    {
        type: 'Assistant',
        subType: 'ToolCall',
        content: 'read_file',
        index: 2,
        toolCallDetails: {
            toolName: 'read_file',
            arguments: {
                path: 'data/sample.csv',
                encoding: 'utf-8',
                max_lines: 1000,
                parse_options: {
                    delimiter: ',',
                    header: true,
                    skip_empty_lines: true,
                    columns: ['name', 'age', 'city', 'salary', 'department', 'start_date'],
                    data_types: {
                        age: 'integer',
                        salary: 'float',
                        start_date: 'date'
                    }
                }
            },
            rawXml: '<read_file><path>data/sample.csv</path><encoding>utf-8</encoding></read_file>',
            parseSuccess: true
        },
        contentSize: 45,
        isRelevant: true,
        confidenceScore: 0.85
    },
    {
        type: 'User',
        subType: 'ToolResult',
        content: `CSV file read successfully. Found 500 rows with the following structure:
name,age,city,salary,department,start_date
John Doe,30,Paris,45000.0,Engineering,2020-01-15
Jane Smith,25,Lyon,38000.0,Marketing,2021-03-20
...
[Additional 497 rows with employee data including names, ages, cities, salaries, departments, and start dates. The dataset contains comprehensive information about company employees across multiple departments including Engineering, Marketing, Sales, HR, and Finance. Salary ranges from 25000 to 85000, ages from 22 to 65, and locations across major French cities.]`,
        index: 3,
        toolResultDetails: {
            success: true,
            outputSize: 2840,
            resultType: 'text',
            truncated: false
        },
        contentSize: 2840,
        isRelevant: true,
        confidenceScore: 0.8
    },
    {
        type: 'Assistant',
        subType: 'Thinking',
        content: 'L\'utilisateur veut analyser des donn√©es CSV. Je vais maintenant cr√©er un script Python complet qui inclut la lecture, l\'analyse statistique de base, et la visualisation des donn√©es.',
        index: 4,
        contentSize: 178,
        isRelevant: true,
        confidenceScore: 0.7
    },
    {
        type: 'Assistant',
        subType: 'Completion',
        content: `Voici un script Python complet pour analyser vos donn√©es CSV :

\`\`\`python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Configuration
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

def analyze_csv_data(file_path):
    \"\"\"
    Analyse compl√®te d'un fichier CSV
    \"\"\"
    # Lecture des donn√©es
    df = pd.read_csv(file_path)
    
    # Statistiques de base
    print("=== INFORMATIONS G√âN√âRALES ===")
    print(f"Nombre de lignes: {len(df)}")
    print(f"Nombre de colonnes: {len(df.columns)}")
    print(f"\\nAper√ßu des donn√©es:")
    print(df.head())
    
    # Analyse statistique
    print("\\n=== STATISTIQUES DESCRIPTIVES ===")
    print(df.describe())
    
    # Gestion des valeurs manquantes
    print("\\n=== VALEURS MANQUANTES ===")
    missing_data = df.isnull().sum()
    print(missing_data[missing_data > 0])
    
    # Visualisations
    create_visualizations(df)
    
    return df

def create_visualizations(df):
    \"\"\"
    Cr√©e des graphiques d'analyse
    \"\"\"
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    
    # Distribution des √¢ges
    df['age'].hist(bins=20, ax=axes[0,0], alpha=0.7)
    axes[0,0].set_title('Distribution des √¢ges')
    axes[0,0].set_xlabel('√Çge')
    axes[0,0].set_ylabel('Fr√©quence')
    
    # Salaires par d√©partement
    df.boxplot(column='salary', by='department', ax=axes[0,1])
    axes[0,1].set_title('Salaires par d√©partement')
    
    # √âvolution des embauches
    df['start_date'] = pd.to_datetime(df['start_date'])
    df['year'] = df['start_date'].dt.year
    df['year'].value_counts().sort_index().plot(kind='bar', ax=axes[1,0])
    axes[1,0].set_title('Embauches par ann√©e')
    
    # Corr√©lation √¢ge/salaire
    axes[1,1].scatter(df['age'], df['salary'], alpha=0.6)
    axes[1,1].set_xlabel('√Çge')
    axes[1,1].set_ylabel('Salaire')
    axes[1,1].set_title('Corr√©lation √Çge/Salaire')
    
    plt.tight_layout()
    plt.savefig('analysis_results.png', dpi=300, bbox_inches='tight')
    plt.show()

if __name__ == "__main__":
    # Utilisation du script
    df = analyze_csv_data('data/sample.csv')
    
    # Analyses suppl√©mentaires
    print("\\n=== ANALYSES AVANC√âES ===")
    
    # Top 10 des salaires
    top_salaries = df.nlargest(10, 'salary')
    print("\\nTop 10 des salaires:")
    print(top_salaries[['name', 'department', 'salary']])
    
    # Moyenne par d√©partement
    dept_avg = df.groupby('department')['salary'].agg(['mean', 'count']).round(2)
    print("\\nMoyennes par d√©partement:")
    print(dept_avg)
\`\`\`

Ce script fournit une analyse compl√®te incluant :
- Lecture et validation des donn√©es
- Statistiques descriptives
- D√©tection des valeurs manquantes  
- Visualisations automatiques
- Analyses par d√©partement
- Export des r√©sultats`,
        index: 5,
        contentSize: 3245,
        isRelevant: true,
        confidenceScore: 0.95
    }
];

// ===========================
// FONCTIONS DE D√âMONSTRATION PHASE 5
// ===========================

/**
 * D√©montre la g√©n√©ration de table des mati√®res interactive
 */
function demonstrateInteractiveTableOfContents(): string {
    console.log('üöÄ D√©monstration: Table des Mati√®res Interactive Phase 5');
    
    const tableOfContents = MarkdownFormatterService.generateTableOfContents(
        sampleMessages, 
        phase5Configuration.interactiveToCSOptions
    );
    
    console.log('‚úÖ Table des mati√®res g√©n√©r√©e avec compteurs et barres de progression');
    return tableOfContents;
}

/**
 * D√©montre la troncature intelligente des param√®tres
 */
function demonstrateParameterTruncation(): string {
    console.log('üöÄ D√©monstration: Troncature Intelligente Phase 5');
    
    const longParameters = {
        query: 'SELECT * FROM users WHERE created_at > "2023-01-01" AND status = "active" AND department IN ("Engineering", "Marketing", "Sales") ORDER BY created_at DESC',
        options: {
            limit: 1000,
            include_metadata: true,
            format: 'json',
            columns: ['id', 'name', 'email', 'department', 'salary', 'created_at', 'updated_at'],
            filters: {
                salary_min: 30000,
                salary_max: 100000,
                departments: ['Engineering', 'Marketing', 'Sales', 'HR'],
                locations: ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice']
            }
        }
    };
    
    const truncationResult = MarkdownFormatterService.truncateToolParameters(
        longParameters, 
        phase5Configuration.truncationOptions
    );
    
    if (truncationResult.wasTruncated) {
        console.log('‚úÖ Param√®tres tronqu√©s intelligemment');
        const toggleHtml = MarkdownFormatterService.generateTruncationToggle(
            JSON.stringify(longParameters, null, 2),
            truncationResult.content,
            'demo-params'
        );
        return toggleHtml;
    }
    
    return truncationResult.content;
}

/**
 * D√©montre les compteurs visuels
 */
function demonstrateMessageCounters(): any {
    console.log('üöÄ D√©monstration: Compteurs Visuels Phase 5');
    
    const counters = MarkdownFormatterService.generateMessageCounters(sampleMessages);
    
    console.log('‚úÖ Compteurs g√©n√©r√©s:', counters);
    console.log(`- Messages utilisateur: ${counters.User}`);
    console.log(`- Messages assistant: ${counters.Assistant}`);
    console.log(`- Appels d'outils: ${counters.ToolCall}`);
    console.log(`- R√©sultats d'outils: ${counters.ToolResult}`);
    console.log(`- Total: ${counters.total}`);
    
    return counters;
}

/**
 * D√©montre la g√©n√©ration du script JavaScript interactif
 */
function demonstrateInteractiveScript(): string {
    console.log('üöÄ D√©monstration: JavaScript Interactif Phase 5');
    
    const interactiveScript = MarkdownFormatterService.generateInteractiveScript();
    
    console.log('‚úÖ Script JavaScript g√©n√©r√© avec:');
    console.log('  - Smooth scroll vers les sections');
    console.log('  - Toggle pour contenu tronqu√©');  
    console.log('  - Copy to clipboard');
    console.log('  - Recherche dans la table des mati√®res');
    console.log('  - Highlighting actif des liens de navigation');
    
    return interactiveScript;
}

/**
 * G√©n√®re un exemple HTML complet avec toutes les fonctionnalit√©s Phase 5
 */
function generateCompletePhase5Demo(): string {
    console.log('üöÄ G√©n√©ration: D√©mo HTML Compl√®te Phase 5');
    
    // CSS avanc√© avec styles Phase 5
    // Le CSS est directement int√©gr√© dans generateAdvancedCSS
    const cssContent = '<style>' +
        'body { font-family: -apple-system, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }' +
        '.conversation-section { margin: 20px 0; padding: 16px; border-radius: 8px; }' +
        '.user-message { background: #dbeafe; border-left: 4px solid #2563eb; }' +
        '.assistant-message { background: #dcfce7; border-left: 4px solid #059669; }' +
        '.tool-call { background: #fed7aa; border-left: 4px solid #ea580c; }' +
        '.tool-result { background: #e9d5ff; border-left: 4px solid #7c3aed; }' +
        '</style>';
    
    // Table des mati√®res interactive
    const tableOfContents = demonstrateInteractiveTableOfContents();
    
    // Contenu des messages avec ancres
    let bodyContent = '';
    sampleMessages.forEach((message, index) => {
        const anchor = MarkdownFormatterService.generateNavigationAnchors(index, message.subType);
        
        let messageHtml = '';
        
        switch (message.subType) {
            case 'UserMessage':
                messageHtml = MarkdownFormatterService.formatUserMessage(message.content);
                break;
            case 'Completion':
                messageHtml = MarkdownFormatterService.formatAssistantMessage(message.content);
                break;
            case 'ToolCall':
                if (message.toolCallDetails) {
                    messageHtml = MarkdownFormatterService.formatToolCall(
                        message.toolCallDetails.toolName,
                        message.toolCallDetails.arguments
                    );
                }
                break;
            case 'ToolResult':
                messageHtml = MarkdownFormatterService.formatToolResult('read_file', message.content);
                break;
            default:
                messageHtml = `<div class="conversation-section">${message.content}</div>`;
        }
        
        bodyContent += `<div id="${anchor}">\n${messageHtml}\n</div>\n`;
    });
    
    // Script interactif
    const interactiveScript = demonstrateInteractiveScript();
    
    // HTML final
    const finalHtml = `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Roo Phase 5 - D√©monstration Interactive</title>
    ${cssContent}
</head>
<body>
    <header>
        <h1>üöÄ Roo Phase 5 - D√©monstration Interactive</h1>
        <p>Cette page d√©montre toutes les nouvelles fonctionnalit√©s Phase 5 :</p>
        <ul>
            <li>‚ú® Table des mati√®res interactive avec compteurs visuels</li>
            <li>üìö Troncature intelligente des param√®tres</li>
            <li>‚ö° Interactions JavaScript avanc√©es</li>
            <li>üéØ Navigation par ancres avec smooth scroll</li>
            <li>üîç Recherche et filtrage dynamique</li>
            <li>üìã Copy-to-clipboard automatique</li>
        </ul>
    </header>
    
    ${tableOfContents}
    
    <main>
        <h2>üí¨ Conversation Exemple</h2>
        ${bodyContent}
    </main>
    
    <footer>
        <p>Generated by Roo State Manager - Phase 5 Interactive Features</p>
    </footer>
    
    ${interactiveScript}
</body>
</html>`;
    
    console.log('‚úÖ HTML complet g√©n√©r√© avec toutes les fonctionnalit√©s Phase 5');
    return finalHtml;
}

// ===========================
// EXPORT DES FONCTIONS DEMO
// ===========================

export {
    phase5Configuration,
    sampleMessages,
    demonstrateInteractiveTableOfContents,
    demonstrateParameterTruncation,  
    demonstrateMessageCounters,
    demonstrateInteractiveScript,
    generateCompletePhase5Demo
};

// ===========================
// UTILISATION EXEMPLE
// ===========================

/*
// Pour utiliser cette d√©mo :

import { 
    generateCompletePhase5Demo, 
    demonstrateMessageCounters 
} from './phase5-demo.js';

// G√©n√©rer une d√©mo compl√®te
const htmlDemo = generateCompletePhase5Demo();
console.log(htmlDemo);

// Tester les compteurs
const counters = demonstrateMessageCounters();
console.log('Compteurs:', counters);
*/