/**
 * Outil MCP : roosync_amend_message
 * 
 * Modifie le contenu d'un message envoy√© avant qu'il ne soit lu
 * 
 * @module roosync/amend_message
 */

import { MessageManager } from '../../services/MessageManager.js';
import { getSharedStatePath } from '../../utils/server-helpers.js';
import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

/**
 * Arguments de l'outil roosync_amend_message
 */
interface AmendMessageArgs {
  /** ID du message √† modifier */
  message_id: string;
  
  /** Nouveau contenu du message (remplace l'original) */
  new_content: string;
  
  /** Raison de l'amendement (optionnel, pour tra√ßabilit√©) */
  reason?: string;
}

/**
 * R√©cup√®re l'ID de la machine locale depuis sync-config.json
 * 
 * @param sharedStatePath Chemin vers .shared-state
 * @returns ID de la machine locale
 */
function getLocalMachineId(sharedStatePath: string): string {
  const configPath = join(sharedStatePath, 'sync-config.json');
  
  if (!existsSync(configPath)) {
    throw new Error(`Fichier sync-config.json introuvable √† : ${configPath}`);
  }
  
  try {
    const configContent = readFileSync(configPath, 'utf-8');
    const config = JSON.parse(configContent);
    
    if (!config.machineId) {
      throw new Error('machineId absent dans sync-config.json');
    }
    
    return config.machineId;
  } catch (error) {
    throw new Error(`Erreur lecture sync-config.json : ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Modifie le contenu d'un message envoy√© (avant lecture)
 * 
 * @param args Arguments de l'outil
 * @returns R√©sultat de l'amendement
 */
export async function amendMessage(
  args: AmendMessageArgs
): Promise<{ content: Array<{ type: string; text: string }> }> {
  console.error('‚úèÔ∏è [amend_message] Starting...');

  try {
    // Validation des param√®tres requis
    if (!args.message_id) {
      throw new Error('Param√®tre "message_id" requis : ID du message √† modifier');
    }
    
    if (!args.new_content) {
      throw new Error('Param√®tre "new_content" requis : Nouveau contenu du message');
    }

    // Initialiser le MessageManager
    const sharedStatePath = getSharedStatePath();
    const messageManager = new MessageManager(sharedStatePath);

    // Obtenir l'ID de la machine locale (√©metteur)
    const senderId = getLocalMachineId(sharedStatePath);
    console.error(`üîê [amend_message] Sender ID: ${senderId}`);

    // Amender le message via MessageManager
    console.error(`‚úèÔ∏è [amend_message] Amending message: ${args.message_id}`);
    const result = await messageManager.amendMessage(
      args.message_id,
      senderId,
      args.new_content,
      args.reason
    );

    // Formater le r√©sultat
    const successMessage = `‚úÖ **Message amend√© avec succ√®s**

**ID :** \`${result.message_id}\`
**Amend√© le :** ${new Date(result.amended_at).toLocaleString('fr-FR', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit'
})}
**Raison :** ${result.reason}

üìã **Contenu original pr√©serv√© :** ${result.original_content_preserved ? '‚úÖ Oui (sauvegard√© dans metadata)' : '‚ùå Non'}

---

## üìù Informations importantes

Le message a √©t√© mis √† jour dans :
- ‚úÖ \`messages/sent/${result.message_id}.json\` (exp√©diteur)
- ‚úÖ \`messages/inbox/${result.message_id}.json\` (destinataire, si pr√©sent)

Le destinataire verra le **nouveau contenu** lorsqu'il lira le message.

Le **contenu original** est pr√©serv√© dans \`metadata.original_content\` pour tra√ßabilit√©.

---

## ‚ö†Ô∏è Contraintes

- ‚ùå Impossible d'amender un message d√©j√† lu
- ‚ùå Impossible d'amender un message archiv√©
- ‚úÖ Seul l'√©metteur peut amender ses messages
- ‚úÖ Amendements multiples possibles (original toujours pr√©serv√©)`;

    console.error('‚úÖ [amend_message] Success');
    return {
      content: [{ type: 'text', text: successMessage }]
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.error('‚ùå [amend_message] Error:', errorMessage);
    
    return {
      content: [{
        type: 'text',
        text: `‚ùå **Erreur lors de l'amendement du message**

**Message d'erreur :** ${errorMessage}

**V√©rifications :**
- Le message existe-t-il dans messages/sent/ ?
- √ätes-vous l'√©metteur de ce message ?
- Le message est-il encore non lu (status: unread) ?
- Le message n'est-il pas archiv√© ?

**Suggestions :**
- Utilisez \`roosync_get_message\` pour v√©rifier le statut du message
- V√©rifiez que l'ID du message est correct
- Si le message est d√©j√† lu, vous ne pouvez plus le modifier`
      }]
    };
  }
}