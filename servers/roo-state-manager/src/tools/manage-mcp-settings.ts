import { CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import * as fs from 'fs/promises';
import * as path from 'path';
import * as os from 'os';

interface McpServer {
    transportType?: string;
    autoStart?: boolean;
    description?: string;
    disabled?: boolean;
    restart?: string;
    command?: string;
    args?: string[];
    env?: Record<string, string>;
    options?: Record<string, any>;
    autoApprove?: string[];
    alwaysAllow?: string[];
}

interface McpSettings {
    mcpServers: Record<string, McpServer>;
}

const MCP_SETTINGS_PATH = path.join(
    process.env.APPDATA || '',
    'Code',
    'User',
    'globalStorage',
    'rooveterinaryinc.roo-cline',
    'settings',
    'mcp_settings.json'
);

// ====================================================================
// üîí M√âCANISME DE S√âCURISATION - Protection contre l'√©criture sans lecture pr√©alable
// ====================================================================

/**
 * Horodatage de la derni√®re lecture r√©ussie des param√®tres MCP
 * Utilis√© pour autoriser les √©critures seulement apr√®s une lecture r√©cente
 */
let lastReadTimestamp: number | null = null;

/**
 * D√©lai d'autorisation apr√®s lecture (en millisecondes)
 * Par d√©faut: 1 minute (60000 ms)
 */
const WRITE_AUTHORIZATION_TIMEOUT = 60000; // 1 minute

/**
 * V√©rifie si une √©criture est autoris√©e (lecture r√©cente requise)
 * @returns {Object} R√©sultat avec isAuthorized (boolean) et message (string)
 */
function checkWriteAuthorization(): { isAuthorized: boolean; message: string } {
    if (lastReadTimestamp === null) {
        return {
            isAuthorized: false,
            message: 'üö® S√âCURIT√â: Lecture pr√©alable requise avant toute √©criture. Utilisez d\'abord l\'action "read" pour consulter les param√®tres existants.'
        };
    }

    const now = Date.now();
    const timeSinceRead = now - lastReadTimestamp;
    const remainingTime = WRITE_AUTHORIZATION_TIMEOUT - timeSinceRead;

    if (timeSinceRead > WRITE_AUTHORIZATION_TIMEOUT) {
        const minutesExpired = Math.ceil(timeSinceRead / 60000);
        return {
            isAuthorized: false,
            message: `üö® S√âCURIT√â: Autorisation d'√©criture expir√©e (lecture effectu√©e il y a ${minutesExpired} minute${minutesExpired > 1 ? 's' : ''}). Relancez d\'abord une action "read" pour renouveler l\'autorisation.`
        };
    }

    const remainingMinutes = Math.ceil(remainingTime / 60000);
    return {
        isAuthorized: true,
        message: `‚úÖ √âcriture autoris√©e (autorisation valable encore ${remainingMinutes} minute${remainingMinutes > 1 ? 's' : ''})`
    };
}

/**
 * Enregistre un horodatage de lecture r√©ussie
 */
function recordSuccessfulRead(): void {
    lastReadTimestamp = Date.now();
}

/**
 * Obtient les informations sur l'√©tat d'autorisation actuel
 */
function getAuthorizationStatus(): string {
    if (lastReadTimestamp === null) {
        return 'üîí Aucune lecture effectu√©e - √âcriture non autoris√©e';
    }

    const now = Date.now();
    const timeSinceRead = now - lastReadTimestamp;
    const remainingTime = WRITE_AUTHORIZATION_TIMEOUT - timeSinceRead;

    if (timeSinceRead > WRITE_AUTHORIZATION_TIMEOUT) {
        const minutesExpired = Math.ceil(timeSinceRead / 60000);
        return `‚è∞ Autorisation expir√©e depuis ${minutesExpired} minute${minutesExpired > 1 ? 's' : ''}`;
    }

    const remainingMinutes = Math.ceil(remainingTime / 60000);
    return `üü¢ Autorisation active (expire dans ${remainingMinutes} minute${remainingMinutes > 1 ? 's' : ''})`;
}

// ====================================================================

export const manageMcpSettings = {
    name: 'manage_mcp_settings',
    description: 'G√®re le fichier mcp_settings.json en lecture et √©criture s√©curis√©e',
    inputSchema: {
        type: 'object',
        properties: {
            action: { 
                type: 'string', 
                enum: ['read', 'write', 'backup', 'update_server', 'toggle_server'],
                description: 'Action √† effectuer'
            },
            server_name: { 
                type: 'string', 
                description: 'Nom du serveur MCP (pour update_server et toggle_server)'
            },
            server_config: { 
                type: 'object', 
                description: 'Configuration du serveur (pour update_server)'
            },
            settings: { 
                type: 'object', 
                description: 'Param√®tres complets (pour write)'
            },
            backup: {
                type: 'boolean',
                description: 'Cr√©er une sauvegarde avant modification',
                default: true
            }
        },
        required: ['action'],
    },
    async handler(args: {
        action: string;
        server_name?: string;
        server_config?: McpServer;
        settings?: McpSettings;
        backup?: boolean;
    }): Promise<CallToolResult> {
        try {
            switch (args.action) {
                case 'read':
                    return await readMcpSettings();
                    
                case 'write':
                    if (!args.settings) {
                        return { content: [{ type: 'text' as const, text: 'Param√®tre settings requis pour write' }] };
                    }
                    return await writeMcpSettings(args.settings, args.backup !== false);
                    
                case 'backup':
                    return await backupMcpSettings();
                    
                case 'update_server':
                    if (!args.server_name || !args.server_config) {
                        return { content: [{ type: 'text' as const, text: 'Param√®tres server_name et server_config requis pour update_server' }] };
                    }
                    return await updateServerConfig(args.server_name, args.server_config, args.backup !== false);
                    
                case 'toggle_server':
                    if (!args.server_name) {
                        return { content: [{ type: 'text' as const, text: 'Param√®tre server_name requis pour toggle_server' }] };
                    }
                    return await toggleServer(args.server_name, args.backup !== false);
                    
                default:
                    return { content: [{ type: 'text' as const, text: `Action non reconnue: ${args.action}` }] };
            }
        } catch (error) {
            return { 
                content: [{ 
                    type: 'text' as const, 
                    text: `Erreur dans manage_mcp_settings: ${error instanceof Error ? error.message : String(error)}` 
                }] 
            };
        }
    },
};

async function readMcpSettings(): Promise<CallToolResult> {
    try {
        const content = await fs.readFile(MCP_SETTINGS_PATH, 'utf-8');
        const settings = JSON.parse(content) as McpSettings;
        
        // üîí S√âCURIT√â: Enregistrer l'horodatage de lecture r√©ussie
        recordSuccessfulRead();
        
        return {
            content: [{
                type: 'text' as const,
                text: `‚úÖ Configuration MCP lue depuis ${MCP_SETTINGS_PATH}\n\nüîí **AUTORISATION D'√âCRITURE ACCORD√âE** (valable 1 minute)\n\n${JSON.stringify(settings, null, 2)}`
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: 'text' as const,
                text: `‚ùå Erreur de lecture: ${error instanceof Error ? error.message : String(error)}\n\n‚ö†Ô∏è Aucune autorisation d'√©criture accord√©e due √† l'√©chec de lecture.`
            }]
        };
    }
}

async function writeMcpSettings(settings: McpSettings, backup: boolean): Promise<CallToolResult> {
    try {
        // üîí S√âCURIT√â: V√©rifier l'autorisation d'√©criture
        const authCheck = checkWriteAuthorization();
        if (!authCheck.isAuthorized) {
            return {
                content: [{
                    type: 'text' as const,
                    text: `‚ùå **√âCRITURE REFUS√âE**\n\n${authCheck.message}\n\nüìã **√âtat actuel:** ${getAuthorizationStatus()}\n\nüí° **Solution:** Ex√©cutez d'abord :\n\`\`\`\nuse_mcp_tool roo-state-manager manage_mcp_settings {"action": "read"}\n\`\`\``
                }]
            };
        }

        // Valider la structure JSON
        if (!settings.mcpServers || typeof settings.mcpServers !== 'object') {
            throw new Error('Structure invalide: mcpServers requis');
        }
        
        if (backup) {
            await backupMcpSettings();
        }
        
        const content = JSON.stringify(settings, null, 2);
        await fs.writeFile(MCP_SETTINGS_PATH, content, 'utf-8');
        
        return {
            content: [{
                type: 'text' as const,
                text: `‚úÖ **√âCRITURE AUTORIS√âE ET R√âUSSIE**\n\nConfiguration MCP √©crite avec succ√®s dans ${MCP_SETTINGS_PATH}${backup ? ' (sauvegarde cr√©√©e)' : ''}\n\n${authCheck.message}`
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: 'text' as const,
                text: `‚ùå Erreur d'√©criture: ${error instanceof Error ? error.message : String(error)}`
            }]
        };
    }
}

// Outil rebuild_task_index d√©plac√© ici √† cause d'un probl√®me runtime dans vscode-global-state.ts
export const rebuildTaskIndexFixed = {
    name: 'rebuild_task_index',
    description: 'Reconstruit l\'index SQLite VS Code en ajoutant les t√¢ches orphelines d√©tect√©es sur le disque.',
    inputSchema: {
        type: 'object',
        properties: {
            workspace_filter: {
                type: 'string',
                description: 'Filtre optionnel par workspace. Si sp√©cifi√©, seules les t√¢ches de ce workspace seront ajout√©es.'
            },
            max_tasks: {
                type: 'number',
                description: 'Nombre maximum de t√¢ches √† ajouter (pour test). Par d√©faut, toutes les t√¢ches.',
                default: 0
            },
            dry_run: {
                type: 'boolean',
                description: 'Si true, simule l\'op√©ration sans modifier l\'index SQLite.',
                default: false
            }
        },
        required: []
    },
    async handler(args: { workspace_filter?: string, max_tasks?: number, dry_run?: boolean }) {
        const { workspace_filter, max_tasks = 0, dry_run = false } = args;
        
        try {
            // Impl√©mentation simplifi√©e qui ne d√©pend pas de RooStorageDetector
            const tasksDir = path.join(os.homedir(), 'AppData', 'Roaming', 'Code', 'User', 'globalStorage', 'rooveterinaryinc.roo-cline', 'tasks');
            
            let report = `# üîß REBUILD TASK INDEX - IMPL√âMENTATION SIMPLIFI√âE\n\n`;
            report += `**Mode:** ${dry_run ? 'üß™ SIMULATION (dry-run)' : '‚ö° RECONSTRUCTION R√âELLE'}\n`;
            report += `**R√©pertoire de base:** ${tasksDir}\n\n`;
            
            // V√©rifier si le r√©pertoire existe
            try {
                const stats = await fs.stat(tasksDir);
                if (!stats.isDirectory()) {
                    throw new Error('Pas un r√©pertoire');
                }
                report += `‚úÖ **R√©pertoire des conversations trouv√© !**\n\n`;
            } catch (error) {
                report += `‚ùå **R√©pertoire des conversations introuvable :** ${tasksDir}\n`;
                report += `‚ö†Ô∏è **Suggestion :** V√©rifiez que Roo-Code a √©t√© utilis√© au moins une fois.\n\n`;
                
                return {
                    content: [{
                        type: 'text' as const,
                        text: report
                    }]
                };
            }
            
            // Lister les t√¢ches disponibles
            const entries = await fs.readdir(tasksDir);
            const taskDirs = [];
            
            for (const entry of entries) {
                const fullPath = path.join(tasksDir, entry);
                try {
                    const stats = await fs.stat(fullPath);
                    if (stats.isDirectory()) {
                        // V√©rifier si c'est un UUID valide (format basique)
                        if (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(entry)) {
                            taskDirs.push({
                                id: entry,
                                path: fullPath,
                                stats: stats
                            });
                        }
                    }
                } catch (error) {
                    // Ignorer les erreurs d'acc√®s
                    continue;
                }
            }
            
            report += `üìä **T√¢ches d√©tect√©es sur le disque:** ${taskDirs.length}\n`;
            
            if (workspace_filter) {
                report += `üîç **Filtre workspace actif:** ${workspace_filter}\n`;
            }
            
            if (max_tasks > 0) {
                report += `üéØ **Limite fix√©e:** ${max_tasks} t√¢ches\n`;
            }
            
            report += `\n## üìã ANALYSE DES T√ÇCHES\n\n`;
            
            let processedCount = 0;
            let metadataGeneratedCount = 0;
            let errorCount = 0;
            
            // Traiter les t√¢ches
            const tasksToProcess = max_tasks > 0 ? taskDirs.slice(0, max_tasks) : taskDirs;
            
            for (const task of tasksToProcess) {
                processedCount++;
                
                const metadataFile = path.join(task.path, 'task_metadata.json');
                
                try {
                    // V√©rifier si task_metadata.json existe d√©j√†
                    await fs.access(metadataFile);
                    report += `‚úÖ **${task.id}** : task_metadata.json existe d√©j√†\n`;
                } catch (error) {
                    // task_metadata.json n'existe pas, le cr√©er
                    report += `üîß **${task.id}** : G√©n√©ration de task_metadata.json...\n`;
                    
                    if (!dry_run) {
                        try {
                            // D√©tecter le workspace r√©el avec WorkspaceDetector
                            let detectedWorkspace = 'unknown';
                            try {
                                const { WorkspaceDetector } = await import('../utils/workspace-detector.js');
                                const workspaceDetector = new WorkspaceDetector({
                                    enableCache: true,
                                    validateExistence: false,
                                    normalizePaths: true
                                });
                                
                                const workspaceResult = await workspaceDetector.detect(task.path);
                                if (workspaceResult.workspace) {
                                    detectedWorkspace = workspaceResult.workspace;
                                }
                            } catch (workspaceError) {
                                console.warn(`[WARN] Impossible de d√©tecter le workspace pour ${task.id}: ${workspaceError}`);
                                // Garder 'unknown' comme fallback
                            }
                            
                            // Cr√©er un metadata basique avec le workspace d√©tect√©
                            const basicMetadata = {
                                id: task.id,
                                createdAt: task.stats.birthtime.toISOString(),
                                lastModified: task.stats.mtime.toISOString(),
                                title: `T√¢che ${task.id.substring(0, 8)}...`,
                                mode: 'unknown',
                                messageCount: 0,
                                actionCount: 0,
                                totalSize: 0,
                                workspace: detectedWorkspace,
                                status: 'restored'
                            };
                            
                            await fs.writeFile(metadataFile, JSON.stringify(basicMetadata, null, 2), 'utf-8');
                            metadataGeneratedCount++;
                            report += `   ‚úÖ Metadata g√©n√©r√© avec succ√®s\n`;
                        } catch (writeError) {
                            errorCount++;
                            report += `   ‚ùå Erreur d'√©criture: ${writeError}\n`;
                        }
                    } else {
                        metadataGeneratedCount++; // Compter comme r√©ussi en mode dry-run
                        report += `   üß™ SIMULATION : Metadata serait g√©n√©r√©\n`;
                    }
                }
                
                // Appliquer le filtre workspace si n√©cessaire
                if (workspace_filter) {
                    // En mode simplifi√©, on ne peut pas facilement extraire le workspace
                    // On fait confiance au filtre fourni
                }
            }
            
            report += `\n## üìä R√âSULTATS\n\n`;
            report += `- **T√¢ches trait√©es:** ${processedCount}\n`;
            report += `- **M√©tadonn√©es g√©n√©r√©es:** ${metadataGeneratedCount}\n`;
            report += `- **Erreurs:** ${errorCount}\n`;
            
            if (dry_run) {
                report += `\n‚ö†Ô∏è **MODE SIMULATION** - Aucune modification effectu√©e sur le disque.\n`;
                report += `Relancez avec \`"dry_run": false\` pour appliquer les changements.\n`;
            } else {
                report += `\n‚úÖ **RECONSTRUCTION TERMIN√âE !**\n`;
                if (metadataGeneratedCount > 0) {
                    report += `üéâ ${metadataGeneratedCount} fichiers task_metadata.json ont √©t√© cr√©√©s.\n`;
                    report += `üì± Les t√¢ches devraient maintenant appara√Ætre dans l'interface Roo-Code !\n`;
                }
            }
            
            return {
                content: [{
                    type: 'text' as const,
                    text: report
                }]
            };
            
        } catch (error) {
            return {
                content: [{
                    type: 'text' as const,
                    text: `‚ùå ERREUR lors de la reconstruction de l'index :\n\n${error instanceof Error ? error.message : String(error)}\n\nStack trace:\n${error instanceof Error ? error.stack : 'N/A'}`
                }]
            };
        }
    }
};

async function backupMcpSettings(): Promise<CallToolResult> {
    try {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupPath = MCP_SETTINGS_PATH.replace('.json', `_backup_${timestamp}.json`);
        
        const content = await fs.readFile(MCP_SETTINGS_PATH, 'utf-8');
        await fs.writeFile(backupPath, content, 'utf-8');
        
        return {
            content: [{
                type: 'text' as const,
                text: `Sauvegarde cr√©√©e: ${backupPath}`
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: 'text' as const,
                text: `Erreur de sauvegarde: ${error instanceof Error ? error.message : String(error)}`
            }]
        };
    }
}

async function updateServerConfig(serverName: string, serverConfig: McpServer, backup: boolean): Promise<CallToolResult> {
    try {
        // üîí S√âCURIT√â: V√©rifier l'autorisation d'√©criture
        const authCheck = checkWriteAuthorization();
        if (!authCheck.isAuthorized) {
            return {
                content: [{
                    type: 'text' as const,
                    text: `‚ùå **MISE √Ä JOUR SERVEUR REFUS√âE**\n\n${authCheck.message}\n\nüìã **√âtat actuel:** ${getAuthorizationStatus()}\n\nüí° **Solution:** Ex√©cutez d'abord :\n\`\`\`\nuse_mcp_tool roo-state-manager manage_mcp_settings {"action": "read"}\n\`\`\``
                }]
            };
        }

        const content = await fs.readFile(MCP_SETTINGS_PATH, 'utf-8');
        const settings = JSON.parse(content) as McpSettings;
        
        if (backup) {
            await backupMcpSettings();
        }
        
        settings.mcpServers[serverName] = serverConfig;
        
        const newContent = JSON.stringify(settings, null, 2);
        await fs.writeFile(MCP_SETTINGS_PATH, newContent, 'utf-8');
        
        return {
            content: [{
                type: 'text' as const,
                text: `‚úÖ **MISE √Ä JOUR SERVEUR AUTORIS√âE ET R√âUSSIE**\n\nConfiguration du serveur "${serverName}" mise √† jour avec succ√®s${backup ? ' (sauvegarde cr√©√©e)' : ''}\n\n${authCheck.message}`
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: 'text' as const,
                text: `‚ùå Erreur de mise √† jour du serveur: ${error instanceof Error ? error.message : String(error)}`
            }]
        };
    }
}

async function toggleServer(serverName: string, backup: boolean): Promise<CallToolResult> {
    try {
        // üîí S√âCURIT√â: V√©rifier l'autorisation d'√©criture
        const authCheck = checkWriteAuthorization();
        if (!authCheck.isAuthorized) {
            return {
                content: [{
                    type: 'text' as const,
                    text: `‚ùå **BASCULEMENT SERVEUR REFUS√â**\n\n${authCheck.message}\n\nüìã **√âtat actuel:** ${getAuthorizationStatus()}\n\nüí° **Solution:** Ex√©cutez d'abord :\n\`\`\`\nuse_mcp_tool roo-state-manager manage_mcp_settings {"action": "read"}\n\`\`\``
                }]
            };
        }

        const content = await fs.readFile(MCP_SETTINGS_PATH, 'utf-8');
        const settings = JSON.parse(content) as McpSettings;
        
        if (!settings.mcpServers[serverName]) {
            throw new Error(`Serveur "${serverName}" non trouv√©`);
        }
        
        if (backup) {
            await backupMcpSettings();
        }
        
        const currentState = settings.mcpServers[serverName].disabled === true;
        settings.mcpServers[serverName].disabled = !currentState;
        
        const newContent = JSON.stringify(settings, null, 2);
        await fs.writeFile(MCP_SETTINGS_PATH, newContent, 'utf-8');
        
        const newState = settings.mcpServers[serverName].disabled ? 'd√©sactiv√©' : 'activ√©';
        
        return {
            content: [{
                type: 'text' as const,
                text: `‚úÖ **BASCULEMENT SERVEUR AUTORIS√â ET R√âUSSI**\n\nServeur "${serverName}" ${newState} avec succ√®s${backup ? ' (sauvegarde cr√©√©e)' : ''}\n\n${authCheck.message}`
            }]
        };
    } catch (error) {
        return {
            content: [{
                type: 'text' as const,
                text: `‚ùå Erreur de basculement du serveur: ${error instanceof Error ? error.message : String(error)}`
            }]
        };
    }
}