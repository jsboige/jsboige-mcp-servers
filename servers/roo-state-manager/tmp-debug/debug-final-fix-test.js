/**
 * TEST FINAL : Validation du fix complet avec extraction des sous-instructions
 * Utilise la nouvelle m√©thode addParentTaskWithSubInstructions()
 */

import { TaskInstructionIndex, computeInstructionPrefix } from './build/src/utils/task-instruction-index.js';
import { extractSubInstructions, testSubInstructionExtraction } from './build/src/utils/sub-instruction-extractor.js';

// Donn√©es EXACTES extraites des fixtures fonctionnelles
const parentTask = {
    taskId: '305b3f90-e0e1-4870-8cf4-4fd33a08cfa4',
    instruction: `TEST-HIERARCHY-A: Tu es une branche de test A dans une hi√©rarchie de test en cascade. Ta mission PRINCIPALE et UNIQUE est de cr√©er exactement 2 sous-t√¢ches pour valider la reconstruction hi√©rarchique du MCP roo-state-manager.

### INSTRUCTIONS STRICTES :

1. **Cr√©er TEST-LEAF-A1** en mode 'code' avec ce message exact :
   "TEST-LEAF-A1: Cr√©e le fichier mcp-debugging/test-data/test-a1.py contenant une fonction validate_email() qui v√©rifie si un email est valide. La fonction doit retourner True/False et inclure des tests basiques. Termine avec attempt_completion en rapportant le chemin du fichier cr√©√©."

2. **Cr√©er TEST-LEAF-A2** en mode 'ask' avec ce message exact :
   "TEST-LEAF-A2: Documente le processus de validation des emails en expliquant les √©tapes principales, les regex utilis√©s et les cas limites. Fournis une documentation technique compl√®te. Termine avec attempt_completion en r√©sumant ta documentation."`
};

const childTask1 = {
    taskId: 'b423bff7-6fec-40fe-a00e-bb2a0ebb52f4',
    instruction: 'TEST-LEAF-A1: Cr√©e le fichier mcp-debugging/test-data/test-a1.py contenant une fonction validate_email() qui v√©rifie si un email est valide. La fonction doit retourner True/False et inclure des tests basiques. Termine avec attempt_completion en rapportant le chemin du fichier cr√©√©.'
};

const childTask2 = {
    taskId: 'b423bff7-6fec-40fe-a00e-bb2a0ebb52f5', // ID fictif pour le test
    instruction: 'TEST-LEAF-A2: Documente le processus de validation des emails en expliquant les √©tapes principales, les regex utilis√©s et les cas limites. Fournis une documentation technique compl√®te. Termine avec attempt_completion en r√©sumant ta documentation.'
};

async function testFinalFix() {
    console.log('üéØ TEST FINAL : Validation du fix complet avec extraction des sous-instructions\n');
    
    try {
        // 1. Test de l'extraction des sous-instructions
        console.log('üìã √âTAPE 1 : Test extraction des sous-instructions');
        testSubInstructionExtraction();
        console.log('\n' + '='.repeat(60) + '\n');
        
        // 2. Test complet du RadixTree avec la nouvelle m√©thode
        console.log('üî¨ √âTAPE 2 : Test RadixTree avec nouvelle m√©thode');
        const index = new TaskInstructionIndex();
        
        // Utiliser la nouvelle m√©thode d'indexation avec extraction automatique
        console.log('üì• Indexation avec extraction automatique...');
        const subInstructionCount = index.addParentTaskWithSubInstructions(
            parentTask.taskId, 
            parentTask.instruction
        );
        console.log(`   ‚úÖ ${subInstructionCount} sous-instructions extraites et index√©es`);
        
        // 3. Test de recherche pour le premier enfant
        console.log('\nüîç Test de recherche pour TEST-LEAF-A1...');
        const child1Prefix = computeInstructionPrefix(childTask1.instruction, 192);
        console.log(`   Pr√©fixe recherch√©: "${child1Prefix.substring(0, 50)}..."`);
        
        const results1 = index.searchExactPrefix(child1Prefix);
        console.log(`   R√©sultats trouv√©s: ${results1.length}`);
        
        if (results1.length > 0) {
            console.log('   üéâ SUCC√àS! Parent trouv√©:');
            results1.forEach((result, i) => {
                console.log(`      ${i+1}. Parent: ${result.taskId}`);
                console.log(`         Pr√©fixe: "${result.prefix.substring(0, 50)}..."`);
            });
        } else {
            console.log('   ‚ùå √âCHEC: Aucun parent trouv√© pour TEST-LEAF-A1');
        }
        
        // 4. Test de recherche pour le deuxi√®me enfant
        console.log('\nüîç Test de recherche pour TEST-LEAF-A2...');
        const child2Prefix = computeInstructionPrefix(childTask2.instruction, 192);
        console.log(`   Pr√©fixe recherch√©: "${child2Prefix.substring(0, 50)}..."`);
        
        const results2 = index.searchExactPrefix(child2Prefix);
        console.log(`   R√©sultats trouv√©s: ${results2.length}`);
        
        if (results2.length > 0) {
            console.log('   üéâ SUCC√àS! Parent trouv√©:');
            results2.forEach((result, i) => {
                console.log(`      ${i+1}. Parent: ${result.taskId}`);
                console.log(`         Pr√©fixe: "${result.prefix.substring(0, 50)}..."`);
            });
        } else {
            console.log('   ‚ùå √âCHEC: Aucun parent trouv√© pour TEST-LEAF-A2');
        }
        
        // 5. Bilan final
        console.log('\n' + '='.repeat(60));
        console.log('üìä BILAN FINAL:');
        console.log(`   Relations parent-enfant trouv√©es: ${results1.length + results2.length}/2`);
        
        const totalSuccess = results1.length + results2.length;
        if (totalSuccess >= 2) {
            console.log('   üéâ FIX R√âUSSI! La r√©gression critique est corrig√©e!');
            console.log('   ‚úÖ Objectif minimal de 4+ relations sera d√©pass√© avec les vraies donn√©es');
        } else if (totalSuccess >= 1) {
            console.log('   ‚ö†Ô∏è  FIX PARTIEL: 1/2 relations trouv√©es, investigation n√©cessaire');
        } else {
            console.log('   ‚ùå FIX √âCHOU√â: Aucune relation trouv√©e, probl√®me persistant');
        }
        
        // 6. Diagnostics compl√©mentaires
        console.log('\nüî¨ DIAGNOSTICS COMPL√âMENTAIRES:');
        console.log(`   Sous-instructions extraites: ${subInstructionCount}`);
        console.log(`   Taille de l'index: ${index.prefixToEntry.size} pr√©fixes`);
        
        // Afficher toutes les cl√©s dans l'index
        console.log('   üìã Pr√©fixes dans l\'index:');
        let keyCount = 0;
        for (const [prefix, entry] of index.prefixToEntry) {
            keyCount++;
            console.log(`      ${keyCount}. "${prefix.substring(0, 50)}..." (${entry.parentTaskIds.length} parent(s))`);
        }
        
    } catch (error) {
        console.error('üí• ERREUR LORS DU TEST:', error.message);
        console.error(error.stack);
    }
}

// Ex√©cution
testFinalFix();