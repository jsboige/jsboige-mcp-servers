/**
 * Script de test pour valider le correctif du bug de corruption mcp_settings.json
 * 
 * Ce test v√©rifie que:
 * 1. Les modifications ne se perdent pas lors de red√©marrages multiples
 * 2. Le fichier JSON reste valide apr√®s plusieurs √©critures
 * 3. Aucune race condition ne corrompt le fichier
 */

import * as fs from 'fs/promises';
import * as path from 'path';

const SETTINGS_PATH = 'C:/Users/MYIA/AppData/Roaming/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/mcp_settings.json';
const BACKUP_PATH = SETTINGS_PATH + '.test-backup.' + Date.now();

interface McpSettings {
  mcpServers: Record<string, any>;
}

/**
 * Cr√©e une sauvegarde du fichier de settings
 */
async function backupSettings(): Promise<void> {
  try {
    const content = await fs.readFile(SETTINGS_PATH, 'utf-8');
    await fs.writeFile(BACKUP_PATH, content, 'utf-8');
    console.log(`‚úÖ Sauvegarde cr√©√©e: ${BACKUP_PATH}`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la sauvegarde:', error);
    throw error;
  }
}

/**
 * Restaure le fichier de settings depuis la sauvegarde
 */
async function restoreSettings(): Promise<void> {
  try {
    const content = await fs.readFile(BACKUP_PATH, 'utf-8');
    await fs.writeFile(SETTINGS_PATH, content, 'utf-8');
    await fs.unlink(BACKUP_PATH);
    console.log('‚úÖ Settings restaur√©s depuis la sauvegarde');
  } catch (error) {
    console.error('‚ùå Erreur lors de la restauration:', error);
    throw error;
  }
}

/**
 * Valide que le fichier JSON est bien form√©
 */
async function validateJson(): Promise<boolean> {
  try {
    const content = await fs.readFile(SETTINGS_PATH, 'utf-8');
    const settings = JSON.parse(content) as McpSettings;
    
    // V√©rifier la structure de base
    if (!settings.mcpServers || typeof settings.mcpServers !== 'object') {
      console.error('‚ùå Structure invalide: mcpServers manquant ou incorrect');
      return false;
    }
    
    console.log('‚úÖ JSON valide avec structure correcte');
    return true;
  } catch (error) {
    console.error('‚ùå JSON invalide:', error);
    return false;
  }
}

/**
 * Simule un red√©marrage de serveur MCP
 */
async function simulateRestart(serverName: string): Promise<boolean> {
  try {
    // Lire l'√©tat actuel
    let settingsRaw = await fs.readFile(SETTINGS_PATH, 'utf-8');
    let settings = JSON.parse(settingsRaw) as McpSettings;
    
    if (!settings.mcpServers[serverName]) {
      console.error(`‚ùå Serveur ${serverName} non trouv√©`);
      return false;
    }
    
    // D√©sactiver
    settings.mcpServers[serverName].enabled = false;
    await fs.writeFile(SETTINGS_PATH, JSON.stringify(settings, null, 2), 'utf-8');
    console.log(`   ‚è∏Ô∏è  Serveur ${serverName} d√©sactiv√©`);
    
    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Relire (comme dans le fix)
    settingsRaw = await fs.readFile(SETTINGS_PATH, 'utf-8');
    settings = JSON.parse(settingsRaw) as McpSettings;
    
    // R√©activer
    settings.mcpServers[serverName].enabled = true;
    await fs.writeFile(SETTINGS_PATH, JSON.stringify(settings, null, 2), 'utf-8');
    console.log(`   ‚ñ∂Ô∏è  Serveur ${serverName} r√©activ√©`);
    
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors du red√©marrage de ${serverName}:`, error);
    return false;
  }
}

/**
 * Test 1: Red√©marrages s√©quentiels multiples
 */
async function testSequentialRestarts(): Promise<boolean> {
  console.log('\nüß™ TEST 1: Red√©marrages s√©quentiels multiples');
  console.log('‚îÄ'.repeat(60));
  
  const servers = ['quickfiles', 'roo-state-manager', 'git'];
  
  for (const server of servers) {
    console.log(`\nüì° Red√©marrage de ${server}...`);
    const success = await simulateRestart(server);
    if (!success) return false;
    
    const valid = await validateJson();
    if (!valid) {
      console.error(`‚ùå JSON corrompu apr√®s red√©marrage de ${server}`);
      return false;
    }
  }
  
  console.log('\n‚úÖ Test 1 r√©ussi: Tous les red√©marrages s√©quentiels OK');
  return true;
}

/**
 * Test 2: Validation de la persistance des modifications
 */
async function testPersistence(): Promise<boolean> {
  console.log('\nüß™ TEST 2: Validation de la persistance');
  console.log('‚îÄ'.repeat(60));
  
  // Lire l'√©tat initial
  const initialContent = await fs.readFile(SETTINGS_PATH, 'utf-8');
  const initialSettings = JSON.parse(initialContent) as McpSettings;
  
  // Effectuer plusieurs red√©marrages
  await simulateRestart('quickfiles');
  await simulateRestart('git');
  
  // V√©rifier que tous les serveurs sont toujours pr√©sents
  const finalContent = await fs.readFile(SETTINGS_PATH, 'utf-8');
  const finalSettings = JSON.parse(finalContent) as McpSettings;
  
  const initialServers = Object.keys(initialSettings.mcpServers);
  const finalServers = Object.keys(finalSettings.mcpServers);
  
  if (initialServers.length !== finalServers.length) {
    console.error(`‚ùå Nombre de serveurs diff√©rent: ${initialServers.length} -> ${finalServers.length}`);
    return false;
  }
  
  for (const server of initialServers) {
    if (!finalSettings.mcpServers[server]) {
      console.error(`‚ùå Serveur ${server} perdu apr√®s les red√©marrages`);
      return false;
    }
  }
  
  console.log('‚úÖ Test 2 r√©ussi: Tous les serveurs pr√©serv√©s');
  return true;
}

/**
 * Test 3: V√©rification de l'int√©grit√© du JSON
 */
async function testJsonIntegrity(): Promise<boolean> {
  console.log('\nüß™ TEST 3: V√©rification de l\'int√©grit√© JSON');
  console.log('‚îÄ'.repeat(60));
  
  // Lire et parser le fichier
  const content = await fs.readFile(SETTINGS_PATH, 'utf-8');
  
  // V√©rifier qu'il n'y a pas de braces en trop
  const openBraces = (content.match(/{/g) || []).length;
  const closeBraces = (content.match(/}/g) || []).length;
  
  if (openBraces !== closeBraces) {
    console.error(`‚ùå Braces d√©s√©quilibr√©es: ${openBraces} ouvrantes, ${closeBraces} fermantes`);
    return false;
  }
  
  console.log(`‚úÖ Braces √©quilibr√©es: ${openBraces} ouvrantes, ${closeBraces} fermantes`);
  
  // V√©rifier qu'il n'y a pas de contenu apr√®s la derni√®re brace
  const lastBraceIndex = content.lastIndexOf('}');
  const afterLastBrace = content.substring(lastBraceIndex + 1).trim();
  
  if (afterLastBrace.length > 0) {
    console.error(`‚ùå Contenu trouv√© apr√®s la derni√®re brace: "${afterLastBrace}"`);
    return false;
  }
  
  console.log('‚úÖ Pas de contenu parasite apr√®s la derni√®re brace');
  console.log('‚úÖ Test 3 r√©ussi: Int√©grit√© JSON valid√©e');
  return true;
}

/**
 * Fonction principale de test
 */
async function runTests(): Promise<void> {
  console.log('üöÄ D√âBUT DES TESTS DE VALIDATION DU CORRECTIF');
  console.log('‚ïê'.repeat(60));
  
  let allTestsPassed = true;
  
  try {
    // Cr√©er une sauvegarde
    await backupSettings();
    
    // Ex√©cuter les tests
    const test1 = await testSequentialRestarts();
    if (!test1) allTestsPassed = false;
    
    const test2 = await testPersistence();
    if (!test2) allTestsPassed = false;
    
    const test3 = await testJsonIntegrity();
    if (!test3) allTestsPassed = false;
    
    // Afficher le r√©sultat final
    console.log('\n' + '‚ïê'.repeat(60));
    if (allTestsPassed) {
      console.log('‚úÖ TOUS LES TESTS R√âUSSIS !');
      console.log('üéâ Le correctif fonctionne correctement');
    } else {
      console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
      console.log('‚ö†Ô∏è Le correctif n√©cessite des ajustements');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERREUR FATALE LORS DES TESTS:', error);
    allTestsPassed = false;
  } finally {
    // Restaurer la sauvegarde
    try {
      await restoreSettings();
    } catch (error) {
      console.error('‚ö†Ô∏è Impossible de restaurer la sauvegarde automatiquement');
      console.error(`Restaurez manuellement depuis: ${BACKUP_PATH}`);
    }
  }
  
  process.exit(allTestsPassed ? 0 : 1);
}

// Ex√©cuter les tests
runTests().catch(error => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});